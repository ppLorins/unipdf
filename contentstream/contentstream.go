//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_d "bufio";_gc "bytes";_a "encoding/hex";_cc "errors";_af "fmt";_dd "github.com/pplorins/unipdf/v3/common";_bg "github.com/pplorins/unipdf/v3/core";_aff "github.com/pplorins/unipdf/v3/internal/imageutil";_ce "github.com/pplorins/unipdf/v3/internal/transform";_gb "github.com/pplorins/unipdf/v3/model";_fg "image/color";_b "image/jpeg";_g "io";_gf "math";_f "strconv";);

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_dgeaa :=ContentStreamProcessor {};_dgeaa ._cdeb =GraphicStateStack {};_fgac :=GraphicsState {};_dgeaa ._gbba =_fgac ;_dgeaa ._ecfc =[]handlerEntry {};_dgeaa ._ebgc =0;_dgeaa ._acb =ops ;return &_dgeaa ;};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gdf *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_gfa :=ContentStreamOperation {};_gfa .Operand ="\u0053\u0043\u004e";_gfa .Params =_bacdf (c );_gdf ._ff =append (_gdf ._ff ,&_gfa );return _gdf ;};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_dc *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_bdd :=ContentStreamOperation {};_bdd .Operand ="\u0079";_bdd .Params =_bacdf ([]float64 {x1 ,y1 ,x3 ,y3 });_dc ._ff =append (_dc ._ff ,&_bdd );return _dc ;};func (_gafa *ContentStreamProcessor )handleCommand_CS (_egd *ContentStreamOperation ,_bggb *_gb .PdfPageResources )error {if len (_egd .Params )< 1{_dd .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _cc .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_egd .Params )> 1{_dd .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _cc .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_cbab ,_aeaa :=_egd .Params [0].(*_bg .PdfObjectName );if !_aeaa {_dd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _cc .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_fffb ,_cbee :=_gafa .getColorspace (string (*_cbab ),_bggb );if _cbee !=nil {return _cbee ;};_gafa ._gbba .ColorspaceStroking =_fffb ;_efcf ,_cbee :=_gafa .getInitialColor (_fffb );if _cbee !=nil {return _cbee ;};_gafa ._gbba .ColorStroking =_efcf ;return nil ;};func _dce (_ccfa []_bg .PdfObjectName )[]_bg .PdfObject {var _egb []_bg .PdfObject ;for _ ,_ffde :=range _ccfa {_egb =append (_egb ,_bg .MakeName (string (_ffde )));};return _egb ;};func _beac (_aafgb []_bg .PdfObjectString )[]_bg .PdfObject {var _gdfb []_bg .PdfObject ;for _ ,_eggd :=range _aafgb {_gdfb =append (_gdfb ,_bg .MakeString (_eggd .Str ()));};return _gdfb ;};

// Parse parses all commands in content stream, returning a list of operation data.
func (_daf *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_bgd :=ContentStreamOperations {};for {_eaab :=ContentStreamOperation {};for {_dbaf ,_dbaa ,_cfg :=_daf .parseObject ();if _cfg !=nil {if _cfg ==_g .EOF {return &_bgd ,nil ;};return &_bgd ,_cfg ;};if _dbaa {_eaab .Operand ,_ =_bg .GetStringVal (_dbaf );_bgd =append (_bgd ,&_eaab );break ;}else {_eaab .Params =append (_eaab .Params ,_dbaf );};};if _eaab .Operand =="\u0042\u0049"{_dcd ,_eggb :=_daf .ParseInlineImage ();if _eggb !=nil {return &_bgd ,_eggb ;};_eaab .Params =append (_eaab .Params ,_dcd );};};};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cdc *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_feb :=ContentStreamOperation {};_feb .Operand ="\u0054\u0073";_feb .Params =_bacdf ([]float64 {rise });_cdc ._ff =append (_cdc ._ff ,&_feb );return _cdc ;};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_deb *ContentCreator )Add_TL (leading float64 )*ContentCreator {_gafg :=ContentStreamOperation {};_gafg .Operand ="\u0054\u004c";_gafg .Params =_bacdf ([]float64 {leading });_deb ._ff =append (_deb ._ff ,&_gafg );return _deb ;};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ace *ContentCreator )Add_G (gray float64 )*ContentCreator {_eaa :=ContentStreamOperation {};_eaa .Operand ="\u0047";_eaa .Params =_bacdf ([]float64 {gray });_ace ._ff =append (_ace ._ff ,&_eaa );return _ace ;};func _cbb (_bad *ContentStreamInlineImage )(_bg .StreamEncoder ,error ){if _bad .Filter ==nil {return _bg .NewRawEncoder (),nil ;};_afd ,_beg :=_bad .Filter .(*_bg .PdfObjectName );if !_beg {_aceg ,_gfc :=_bad .Filter .(*_bg .PdfObjectArray );if !_gfc {return nil ,_af .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");};if _aceg .Len ()==0{return _bg .NewRawEncoder (),nil ;};if _aceg .Len ()!=1{_cgf ,_cacf :=_edad (_bad );if _cacf !=nil {_dd .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_cacf );return nil ,_cacf ;};_dd .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_cgf );return _cgf ,nil ;};_dbdd :=_aceg .Get (0);_afd ,_gfc =_dbdd .(*_bg .PdfObjectName );if !_gfc {return nil ,_af .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");};};switch *_afd {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _bg .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _bg .NewASCII85Encoder (),nil ;case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _fbed (_bad );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _bbb (_bad ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _badb (_bad ,nil );case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _bg .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _bg .NewRunLengthEncoder (),nil ;default:_dd .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_afd );return nil ,_cc .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_aeac *ContentCreator )Add_SCN_pattern (name _bg .PdfObjectName ,c ...float64 )*ContentCreator {_edb :=ContentStreamOperation {};_edb .Operand ="\u0053\u0043\u004e";_edb .Params =_bacdf (c );_edb .Params =append (_edb .Params ,_bg .MakeName (string (name )));_aeac ._ff =append (_aeac ._ff ,&_edb );return _aeac ;};

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ade *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_aaf :=ContentStreamOperation {};_aaf .Operand ="\u0063\u006d";_aaf .Params =_bacdf ([]float64 {a ,b ,c ,d ,e ,f });_ade ._ff =append (_ade ._ff ,&_aaf );return _ade ;};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fca *ContentCreator )Add_gs (dictName _bg .PdfObjectName )*ContentCreator {_de :=ContentStreamOperation {};_de .Operand ="\u0067\u0073";_de .Params =_dce ([]_bg .PdfObjectName {dictName });_fca ._ff =append (_fca ._ff ,&_de );return _fca ;};func (_fdc *ContentStreamParser )skipSpaces ()(int ,error ){_aca :=0;for {_dece ,_bcdf :=_fdc ._gbff .Peek (1);if _bcdf !=nil {return 0,_bcdf ;};if _bg .IsWhiteSpace (_dece [0]){_fdc ._gbff .ReadByte ();_aca ++;}else {break ;};};return _aca ,nil ;};

// Translate applies a simple x-y translation to the transformation matrix.
func (_ab *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _ab .Add_cm (1,0,0,1,tx ,ty );};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dec *ContentCreator )Add_B ()*ContentCreator {_eec :=ContentStreamOperation {};_eec .Operand ="\u0042";_dec ._ff =append (_dec ._ff ,&_eec );return _dec ;};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fge *ContentCreator )Add_s ()*ContentCreator {_gab :=ContentStreamOperation {};_gab .Operand ="\u0073";_fge ._ff =append (_fge ._ff ,&_gab );return _fge ;};func (_aeb *ContentStreamProcessor )handleCommand_SC (_cbaaa *ContentStreamOperation ,_eagf *_gb .PdfPageResources )error {_ffab :=_aeb ._gbba .ColorspaceStroking ;if len (_cbaaa .Params )!=_ffab .GetNumComponents (){_dd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_dd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cbaaa .Params ),_ffab );return _cc .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_ffgf ,_cfff :=_ffab .ColorFromPdfObjects (_cbaaa .Params );if _cfff !=nil {return _cfff ;};_aeb ._gbba .ColorStroking =_ffgf ;return nil ;};

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_agg *ContentCreator )Add_Tr (render int64 )*ContentCreator {_cac :=ContentStreamOperation {};_cac .Operand ="\u0054\u0072";_cac .Params =_fgcf ([]int64 {render });_agg ._ff =append (_agg ._ff ,&_cac );return _agg ;};

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dff *ContentCreator )Add_b ()*ContentCreator {_dca :=ContentStreamOperation {};_dca .Operand ="\u0062";_dff ._ff =append (_dff ._ff ,&_dca );return _dff ;};

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_ccc *ContentStreamParser )ExtractText ()(string ,error ){_ed ,_fcf :=_ccc .Parse ();if _fcf !=nil {return "",_fcf ;};_cec :=false ;_ae ,_ee :=float64 (-1),float64 (-1);_aeg :="";for _ ,_ac :=range *_ed {if _ac .Operand =="\u0042\u0054"{_cec =true ;}else if _ac .Operand =="\u0045\u0054"{_cec =false ;};if _ac .Operand =="\u0054\u0064"||_ac .Operand =="\u0054\u0044"||_ac .Operand =="\u0054\u002a"{_aeg +="\u000a";};if _ac .Operand =="\u0054\u006d"{if len (_ac .Params )!=6{continue ;};_cd ,_gcf :=_ac .Params [4].(*_bg .PdfObjectFloat );if !_gcf {_aee ,_ad :=_ac .Params [4].(*_bg .PdfObjectInteger );if !_ad {continue ;};_cd =_bg .MakeFloat (float64 (*_aee ));};_fead ,_gcf :=_ac .Params [5].(*_bg .PdfObjectFloat );if !_gcf {_ba ,_ca :=_ac .Params [5].(*_bg .PdfObjectInteger );if !_ca {continue ;};_fead =_bg .MakeFloat (float64 (*_ba ));};if _ee ==-1{_ee =float64 (*_fead );}else if _ee > float64 (*_fead ){_aeg +="\u000a";_ae =float64 (*_cd );_ee =float64 (*_fead );continue ;};if _ae ==-1{_ae =float64 (*_cd );}else if _ae < float64 (*_cd ){_aeg +="\u0009";_ae =float64 (*_cd );};};if _cec &&_ac .Operand =="\u0054\u004a"{if len (_ac .Params )< 1{continue ;};_bac ,_afg :=_ac .Params [0].(*_bg .PdfObjectArray );if !_afg {return "",_af .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_ac .Params [0]);};for _ ,_ef :=range _bac .Elements (){switch _gcfg :=_ef .(type ){case *_bg .PdfObjectString :_aeg +=_gcfg .Str ();case *_bg .PdfObjectFloat :if *_gcfg < -100{_aeg +="\u0020";};case *_bg .PdfObjectInteger :if *_gcfg < -100{_aeg +="\u0020";};};};}else if _cec &&_ac .Operand =="\u0054\u006a"{if len (_ac .Params )< 1{continue ;};_gdg ,_gcb :=_ac .Params [0].(*_bg .PdfObjectString );if !_gcb {return "",_af .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_ac .Params [0]);};_aeg +=_gdg .Str ();};};return _aeg ,nil ;};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_abg *ContentCreator )Add_EMC ()*ContentCreator {_ffg :=ContentStreamOperation {};_ffg .Operand ="\u0045\u004d\u0043";_abg ._ff =append (_abg ._ff ,&_ffg );return _abg ;};func _bbb (_dfg *ContentStreamInlineImage ,_eff *_bg .PdfObjectDictionary )(*_bg .FlateEncoder ,error ){_bdbg :=_bg .NewFlateEncoder ();if _dfg ._agd !=nil {_bdbg .SetImage (_dfg ._agd );};if _eff ==nil {_aec :=_dfg .DecodeParms ;if _aec !=nil {_gae ,_dcb :=_bg .GetDict (_aec );if !_dcb {_dd .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_aec );return nil ,_af .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_eff =_gae ;};};if _eff ==nil {return _bdbg ,nil ;};_dd .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_eff .String ());_agc :=_eff .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _agc ==nil {_dd .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");}else {_egg ,_baa :=_agc .(*_bg .PdfObjectInteger );if !_baa {_dd .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_agc );return nil ,_af .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_bdbg .Predictor =int (*_egg );};_agc =_eff .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _agc !=nil {_dde ,_dfge :=_agc .(*_bg .PdfObjectInteger );if !_dfge {_dd .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_af .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_bdbg .BitsPerComponent =int (*_dde );};if _bdbg .Predictor > 1{_bdbg .Columns =1;_agc =_eff .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _agc !=nil {_gcg ,_bfba :=_agc .(*_bg .PdfObjectInteger );if !_bfba {return nil ,_af .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_bdbg .Columns =int (*_gcg );};_bdbg .Colors =1;_efa :=_eff .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _efa !=nil {_deg ,_adfg :=_efa .(*_bg .PdfObjectInteger );if !_adfg {return nil ,_af .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_bdbg .Colors =int (*_deg );};};return _bdbg ,nil ;};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_bfb *ContentCreator )Add_W_starred ()*ContentCreator {_eb :=ContentStreamOperation {};_eb .Operand ="\u0057\u002a";_bfb ._ff =append (_bfb ._ff ,&_eb );return _bfb ;};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_bba *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_eefd :=handlerEntry {};_eefd .Condition =condition ;_eefd .Operand =operand ;_eefd .Handler =handler ;_bba ._ecfc =append (_bba ._ecfc ,_eefd );};func (_fafe *ContentStreamParser )parseBool ()(_bg .PdfObjectBool ,error ){_gebg ,_abcg :=_fafe ._gbff .Peek (4);if _abcg !=nil {return _bg .PdfObjectBool (false ),_abcg ;};if (len (_gebg )>=4)&&(string (_gebg [:4])=="\u0074\u0072\u0075\u0065"){_fafe ._gbff .Discard (4);return _bg .PdfObjectBool (true ),nil ;};_gebg ,_abcg =_fafe ._gbff .Peek (5);if _abcg !=nil {return _bg .PdfObjectBool (false ),_abcg ;};if (len (_gebg )>=5)&&(string (_gebg [:5])=="\u0066\u0061\u006cs\u0065"){_fafe ._gbff .Discard (5);return _bg .PdfObjectBool (false ),nil ;};return _bg .PdfObjectBool (false ),_cc .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_cdeb GraphicStateStack ;_acb []*ContentStreamOperation ;_gbba GraphicsState ;_ecfc []handlerEntry ;_ebgc int ;};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ged *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_cde :=ContentStreamOperation {};_cde .Operand ="\u0053\u0043";_cde .Params =_bacdf (c );_ged ._ff =append (_ged ._ff ,&_cde );return _ged ;};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gdgf *ContentCreator )Add_scn_pattern (name _bg .PdfObjectName ,c ...float64 )*ContentCreator {_dfa :=ContentStreamOperation {};_dfa .Operand ="\u0073\u0063\u006e";_dfa .Params =_bacdf (c );_dfa .Params =append (_dfa .Params ,_bg .MakeName (string (name )));_gdgf ._ff =append (_gdgf ._ff ,&_dfa );return _gdgf ;};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_eedf *ContentCreator )Add_TJ (vals ..._bg .PdfObject )*ContentCreator {_gabc :=ContentStreamOperation {};_gabc .Operand ="\u0054\u004a";_gabc .Params =[]_bg .PdfObject {_bg .MakeArray (vals ...)};_eedf ._ff =append (_eedf ._ff ,&_gabc );return _eedf ;};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_efce *ContentCreator )Add_S ()*ContentCreator {_gfg :=ContentStreamOperation {};_gfg .Operand ="\u0053";_efce ._ff =append (_efce ._ff ,&_gfg );return _efce ;};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ceg *ContentCreator )Add_b_starred ()*ContentCreator {_gbd :=ContentStreamOperation {};_gbd .Operand ="\u0062\u002a";_ceg ._ff =append (_ceg ._ff ,&_gbd );return _ceg ;};

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gbf *ContentCreator )Add_Q ()*ContentCreator {_gcd :=ContentStreamOperation {};_gcd .Operand ="\u0051";_gbf ._ff =append (_gbf ._ff ,&_gcd );return _gbf ;};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_bcgf *ContentCreator )Add_quote (textstr _bg .PdfObjectString )*ContentCreator {_bccb :=ContentStreamOperation {};_bccb .Operand ="\u0027";_bccb .Params =_beac ([]_bg .PdfObjectString {textstr });_bcgf ._ff =append (_bcgf ._ff ,&_bccb );return _bcgf ;};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dea *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_gec :=ContentStreamOperation {};_gec .Operand ="\u0073\u0063\u006e";_gec .Params =_bacdf (c );_dea ._ff =append (_dea ._ff ,&_gec );return _dea ;};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_eeg *ContentCreator )Add_ET ()*ContentCreator {_ffe :=ContentStreamOperation {};_ffe .Operand ="\u0045\u0054";_eeg ._ff =append (_eeg ._ff ,&_ffe );return _eeg ;};

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_afa *ContentCreator )Add_Do (name _bg .PdfObjectName )*ContentCreator {_bga :=ContentStreamOperation {};_bga .Operand ="\u0044\u006f";_bga .Params =_dce ([]_bg .PdfObjectName {name });_afa ._ff =append (_afa ._ff ,&_bga );return _afa ;};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_ebe *ContentStreamProcessor )Process (resources *_gb .PdfPageResources )error {_ebe ._gbba .ColorspaceStroking =_gb .NewPdfColorspaceDeviceGray ();_ebe ._gbba .ColorspaceNonStroking =_gb .NewPdfColorspaceDeviceGray ();_ebe ._gbba .ColorStroking =_gb .NewPdfColorDeviceGray (0);_ebe ._gbba .ColorNonStroking =_gb .NewPdfColorDeviceGray (0);_ebe ._gbba .CTM =_ce .IdentityMatrix ();for _ ,_fbb :=range _ebe ._acb {var _acc error ;switch _fbb .Operand {case "\u0071":_ebe ._cdeb .Push (_ebe ._gbba );case "\u0051":if len (_ebe ._cdeb )==0{_dd .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");continue ;};_ebe ._gbba =_ebe ._cdeb .Pop ();case "\u0043\u0053":_acc =_ebe .handleCommand_CS (_fbb ,resources );case "\u0063\u0073":_acc =_ebe .handleCommand_cs (_fbb ,resources );case "\u0053\u0043":_acc =_ebe .handleCommand_SC (_fbb ,resources );case "\u0053\u0043\u004e":_acc =_ebe .handleCommand_SCN (_fbb ,resources );case "\u0073\u0063":_acc =_ebe .handleCommand_sc (_fbb ,resources );case "\u0073\u0063\u006e":_acc =_ebe .handleCommand_scn (_fbb ,resources );case "\u0047":_acc =_ebe .handleCommand_G (_fbb ,resources );case "\u0067":_acc =_ebe .handleCommand_g (_fbb ,resources );case "\u0052\u0047":_acc =_ebe .handleCommand_RG (_fbb ,resources );case "\u0072\u0067":_acc =_ebe .handleCommand_rg (_fbb ,resources );case "\u004b":_acc =_ebe .handleCommand_K (_fbb ,resources );case "\u006b":_acc =_ebe .handleCommand_k (_fbb ,resources );case "\u0063\u006d":_acc =_ebe .handleCommand_cm (_fbb ,resources );};if _acc !=nil {_dd .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_fbb .Operand ,_acc );_dd .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_fbb .Operand );return _acc ;};for _ ,_dgec :=range _ebe ._ecfc {var _eebc error ;if _dgec .Condition .All (){_eebc =_dgec .Handler (_fbb ,_ebe ._gbba ,resources );}else if _dgec .Condition .Operand ()&&_fbb .Operand ==_dgec .Operand {_eebc =_dgec .Handler (_fbb ,_ebe ._gbba ,resources );};if _eebc !=nil {_dd .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_eebc );return _eebc ;};};};return nil ;};

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_gbfg :=ContentStreamParser {};_abdg :=_gc .NewBufferString (contentStr +"\u000a");_gbfg ._gbff =_d .NewReader (_abdg );return &_gbfg ;};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_eea *ContentCreator )SetNonStrokingColor (color _gb .PdfColor )*ContentCreator {switch _bbec :=color .(type ){case *_gb .PdfColorDeviceGray :_eea .Add_g (_bbec .Val ());case *_gb .PdfColorDeviceRGB :_eea .Add_rg (_bbec .R (),_bbec .G (),_bbec .B ());case *_gb .PdfColorDeviceCMYK :_eea .Add_k (_bbec .C (),_bbec .M (),_bbec .Y (),_bbec .K ());default:_dd .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_bbec );};return _eea ;};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ffc *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_ecd :=ContentStreamOperation {};_ecd .Operand ="\u0063";_ecd .Params =_bacdf ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_ffc ._ff =append (_ffc ._ff ,&_ecd );return _ffc ;};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _gb .Image ,encoder _bg .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_bg .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_ddfeg :=ContentStreamInlineImage {};if img .ColorComponents ==1{_ddfeg .ColorSpace =_bg .MakeName ("\u0047");}else if img .ColorComponents ==3{_ddfeg .ColorSpace =_bg .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_ddfeg .ColorSpace =_bg .MakeName ("\u0043\u004d\u0059\u004b");}else {_dd .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );return nil ,_cc .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_ddfeg .BitsPerComponent =_bg .MakeInteger (img .BitsPerComponent );_ddfeg .Width =_bg .MakeInteger (img .Width );_ddfeg .Height =_bg .MakeInteger (img .Height );_cgdg ,_cacd :=encoder .EncodeBytes (img .Data );if _cacd !=nil {return nil ,_cacd ;};_ddfeg ._gcdf =_cgdg ;_ead :=encoder .GetFilterName ();if _ead !=_bg .StreamEncodingFilterNameRaw {_ddfeg .Filter =_bg .MakeName (_ead );};return &_ddfeg ,nil ;};

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_ggb *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_gcc :=ContentStreamOperation {};_gcc .Operand ="\u0054\u006d";_gcc .Params =_bacdf ([]float64 {a ,b ,c ,d ,e ,f });_ggb ._ff =append (_ggb ._ff ,&_gcc );return _ggb ;};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;func (_bdaf *ContentStreamInlineImage )toImageBase (_caf *_gb .PdfPageResources )(*_aff .ImageBase ,error ){if _bdaf ._agd !=nil {return _bdaf ._agd ,nil ;};_fff :=_aff .ImageBase {};if _bdaf .Height ==nil {return nil ,_cc .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_gaed ,_fba :=_bdaf .Height .(*_bg .PdfObjectInteger );if !_fba {return nil ,_cc .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_fff .Height =int (*_gaed );if _bdaf .Width ==nil {return nil ,_cc .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_cfa ,_fba :=_bdaf .Width .(*_bg .PdfObjectInteger );if !_fba {return nil ,_cc .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_fff .Width =int (*_cfa );_edbb ,_bge :=_bdaf .IsMask ();if _bge !=nil {return nil ,_bge ;};if _edbb {_fff .BitsPerComponent =1;_fff .ColorComponents =1;}else {if _bdaf .BitsPerComponent ==nil {_dd .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");_fff .BitsPerComponent =8;}else {_ffa ,_ccd :=_bdaf .BitsPerComponent .(*_bg .PdfObjectInteger );if !_ccd {_dd .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_bdaf .BitsPerComponent );return nil ,_cc .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_fff .BitsPerComponent =int (*_ffa );};if _bdaf .ColorSpace !=nil {_dab ,_gfaa :=_bdaf .GetColorSpace (_caf );if _gfaa !=nil {return nil ,_gfaa ;};_fff .ColorComponents =_dab .GetNumComponents ();}else {_dd .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");_fff .ColorComponents =1;};};if _bgbe ,_cbf :=_bg .GetArray (_bdaf .Decode );_cbf {_fff .Decode ,_bge =_bgbe .ToFloat64Array ();if _bge !=nil {return nil ,_bge ;};};_bdaf ._agd =&_fff ;return _bdaf ._agd ,nil ;};func (_fc *ContentStreamOperations )isWrapped ()bool {if len (*_fc )< 2{return false ;};_cg :=0;for _ ,_aa :=range *_fc {if _aa .Operand =="\u0071"{_cg ++;}else if _aa .Operand =="\u0051"{_cg --;}else {if _cg < 1{return false ;};};};return _cg ==0;};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_cga :=&ContentCreator {};_cga ._ff =ContentStreamOperations {};return _cga ;};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_da *ContentStreamOperations )Bytes ()[]byte {var _e _gc .Buffer ;for _ ,_ea :=range *_da {if _ea ==nil {continue ;};if _ea .Operand =="\u0042\u0049"{_e .WriteString (_ea .Operand +"\u000a");_e .WriteString (_ea .Params [0].WriteString ());}else {for _ ,_bbe :=range _ea .Params {_e .WriteString (_bbe .WriteString ());_e .WriteString ("\u0020");};_e .WriteString (_ea .Operand +"\u000a");};};return _e .Bytes ();};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_gbff *_d .Reader };

// GetColorSpace returns the colorspace of the inline image.
func (_effb *ContentStreamInlineImage )GetColorSpace (resources *_gb .PdfPageResources )(_gb .PdfColorspace ,error ){if _effb .ColorSpace ==nil {_dd .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");return _gb .NewPdfColorspaceDeviceGray (),nil ;};if _daad ,_geb :=_effb .ColorSpace .(*_bg .PdfObjectArray );_geb {return _ddef (_daad );};_cgde ,_adea :=_effb .ColorSpace .(*_bg .PdfObjectName );if !_adea {_dd .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_effb .ColorSpace ,_effb .ColorSpace );return nil ,_cc .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_cgde =="\u0047"||*_cgde =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _gb .NewPdfColorspaceDeviceGray (),nil ;}else if *_cgde =="\u0052\u0047\u0042"||*_cgde =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _gb .NewPdfColorspaceDeviceRGB (),nil ;}else if *_cgde =="\u0043\u004d\u0059\u004b"||*_cgde =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _gb .NewPdfColorspaceDeviceCMYK (),nil ;}else if *_cgde =="\u0049"||*_cgde =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_cc .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_dd .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_cgde );return nil ,_cc .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_bbf ,_afbf :=resources .GetColorspaceByName (*_cgde );if !_afbf {_dd .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_cgde );return nil ,_cc .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _bbf ,nil ;};};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_dge *ContentCreator )Add_Tj (textstr _bg .PdfObjectString )*ContentCreator {_bbecb :=ContentStreamOperation {};_bbecb .Operand ="\u0054\u006a";_bbecb .Params =_beac ([]_bg .PdfObjectString {textstr });_dge ._ff =append (_dge ._ff ,&_bbecb );return _dge ;};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_fgg *ContentCreator )Wrap (){_fgg ._ff .WrapIfNeeded ()};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bfe *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_eed :=ContentStreamOperation {};_eed .Operand ="\u006b";_eed .Params =_bacdf ([]float64 {c ,m ,y ,k });_bfe ._ff =append (_bfe ._ff ,&_eed );return _bfe ;};func (_bada *ContentStreamParser )parseDict ()(*_bg .PdfObjectDictionary ,error ){_dd .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");_fgea :=_bg .MakeDict ();_gfaac ,_ :=_bada ._gbff .ReadByte ();if _gfaac !='<'{return nil ,_cc .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_gfaac ,_ =_bada ._gbff .ReadByte ();if _gfaac !='<'{return nil ,_cc .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};for {_bada .skipSpaces ();_facc ,_cdb :=_bada ._gbff .Peek (2);if _cdb !=nil {return nil ,_cdb ;};_dd .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_facc ),string (_facc ));if (_facc [0]=='>')&&(_facc [1]=='>'){_dd .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");_bada ._gbff .ReadByte ();_bada ._gbff .ReadByte ();break ;};_dd .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_age ,_cdb :=_bada .parseName ();_dd .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_age );if _cdb !=nil {_dd .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_cdb );return nil ,_cdb ;};if len (_age )> 4&&_age [len (_age )-4:]=="\u006e\u0075\u006c\u006c"{_debb :=_age [0:len (_age )-4];_dd .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_age );_dd .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_debb );_bada .skipSpaces ();_gadb ,_ :=_bada ._gbff .Peek (1);if _gadb [0]=='/'{_fgea .Set (_debb ,_bg .MakeNull ());continue ;};};_bada .skipSpaces ();_gadd ,_ ,_cdb :=_bada .parseObject ();if _cdb !=nil {return nil ,_cdb ;};_fgea .Set (_age ,_gadd );_dd .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_age ,_gadd .String ());};return _fgea ,nil ;};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cegc *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_cgc :=ContentStreamOperation {};_cgc .Operand ="\u0072\u0067";_cgc .Params =_bacdf ([]float64 {r ,g ,b });_cegc ._ff =append (_cegc ._ff ,&_cgc );return _cegc ;};

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_cafe HandlerConditionEnum )Operand ()bool {return _cafe ==HandlerConditionEnumOperand };

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_ff ContentStreamOperations };

// String is same as Bytes() except returns as a string for convenience.
func (_ddf *ContentCreator )String ()string {return string (_ddf ._ff .Bytes ())};var _fcgf =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bcg *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_fac :=ContentStreamOperation {};_fac .Operand ="\u0076";_fac .Params =_bacdf ([]float64 {x2 ,y2 ,x3 ,y3 });_bcg ._ff =append (_bcg ._ff ,&_fac );return _bcg ;};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_acf *ContentCreator )Add_W ()*ContentCreator {_bgg :=ContentStreamOperation {};_bgg .Operand ="\u0057";_acf ._ff =append (_acf ._ff ,&_bgg );return _acf ;};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;func _fbed (_dfb *ContentStreamInlineImage )(*_bg .DCTEncoder ,error ){_cda :=_bg .NewDCTEncoder ();_cff :=_gc .NewReader (_dfb ._gcdf );_eaf ,_efd :=_b .DecodeConfig (_cff );if _efd !=nil {_dd .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_efd );return nil ,_efd ;};switch _eaf .ColorModel {case _fg .RGBAModel :_cda .BitsPerComponent =8;_cda .ColorComponents =3;case _fg .RGBA64Model :_cda .BitsPerComponent =16;_cda .ColorComponents =3;case _fg .GrayModel :_cda .BitsPerComponent =8;_cda .ColorComponents =1;case _fg .Gray16Model :_cda .BitsPerComponent =16;_cda .ColorComponents =1;case _fg .CMYKModel :_cda .BitsPerComponent =8;_cda .ColorComponents =4;case _fg .YCbCrModel :_cda .BitsPerComponent =8;_cda .ColorComponents =3;default:return nil ,_cc .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");};_cda .Width =_eaf .Width ;_cda .Height =_eaf .Height ;_dd .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_cda );return _cda ,nil ;};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_bdbd HandlerConditionEnum )All ()bool {return _bdbd ==HandlerConditionEnumAllOperands };func (_aeae *ContentStreamProcessor )handleCommand_G (_fdaf *ContentStreamOperation ,_dbde *_gb .PdfPageResources )error {_eaabb :=_gb .NewPdfColorspaceDeviceGray ();if len (_fdaf .Params )!=_eaabb .GetNumComponents (){_dd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_dd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fdaf .Params ),_eaabb );return _cc .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_agf ,_bbcb :=_eaabb .ColorFromPdfObjects (_fdaf .Params );if _bbcb !=nil {return _bbcb ;};_aeae ._gbba .ColorspaceStroking =_eaabb ;_aeae ._gbba .ColorStroking =_agf ;return nil ;};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_be *ContentCreator )Add_i (flatness float64 )*ContentCreator {_bce :=ContentStreamOperation {};_bce .Operand ="\u0069";_bce .Params =_bacdf ([]float64 {flatness });_be ._ff =append (_be ._ff ,&_bce );return _be ;};func (_adg *ContentStreamProcessor )handleCommand_scn (_cbde *ContentStreamOperation ,_dfc *_gb .PdfPageResources )error {_ccec :=_adg ._gbba .ColorspaceNonStroking ;if !_ffeg (_ccec ){if len (_cbde .Params )!=_ccec .GetNumComponents (){_dd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_dd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cbde .Params ),_ccec );return _cc .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_cdcd ,_gce :=_ccec .ColorFromPdfObjects (_cbde .Params );if _gce !=nil {_dd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_cbde .Params ,_ccec );return _gce ;};_adg ._gbba .ColorNonStroking =_cdcd ;return nil ;};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_bec *ContentCreator )Add_Tstar ()*ContentCreator {_dag :=ContentStreamOperation {};_dag .Operand ="\u0054\u002a";_bec ._ff =append (_bec ._ff ,&_dag );return _bec ;};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cbe *ContentCreator )Add_Tf (fontName _bg .PdfObjectName ,fontSize float64 )*ContentCreator {_aeea :=ContentStreamOperation {};_aeea .Operand ="\u0054\u0066";_aeea .Params =_dce ([]_bg .PdfObjectName {fontName });_aeea .Params =append (_aeea .Params ,_bacdf ([]float64 {fontSize })...);_cbe ._ff =append (_cbe ._ff ,&_aeea );return _cbe ;};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_dfd *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_aef :=ContentStreamOperation {};_aef .Operand ="\u0054\u007a";_aef .Params =_bacdf ([]float64 {scale });_dfd ._ff =append (_dfd ._ff ,&_aef );return _dfd ;};func (_ede *ContentStreamProcessor )handleCommand_cm (_ddddd *ContentStreamOperation ,_gbaf *_gb .PdfPageResources )error {if len (_ddddd .Params )!=6{_dd .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_ddddd .Params ));return _cc .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_abcc ,_becba :=_bg .GetNumbersAsFloat (_ddddd .Params );if _becba !=nil {return _becba ;};_dagd :=_ce .NewMatrix (_abcc [0],_abcc [1],_abcc [2],_abcc [3],_abcc [4],_abcc [5]);_ede ._gbba .CTM .Concat (_dagd );return nil ;};

// WriteString outputs the object as it is to be written to file.
func (_geeb *ContentStreamInlineImage )WriteString ()string {var _dac _gc .Buffer ;_ecdb :="";if _geeb .BitsPerComponent !=nil {_ecdb +="\u002f\u0042\u0050C\u0020"+_geeb .BitsPerComponent .WriteString ()+"\u000a";};if _geeb .ColorSpace !=nil {_ecdb +="\u002f\u0043\u0053\u0020"+_geeb .ColorSpace .WriteString ()+"\u000a";};if _geeb .Decode !=nil {_ecdb +="\u002f\u0044\u0020"+_geeb .Decode .WriteString ()+"\u000a";};if _geeb .DecodeParms !=nil {_ecdb +="\u002f\u0044\u0050\u0020"+_geeb .DecodeParms .WriteString ()+"\u000a";};if _geeb .Filter !=nil {_ecdb +="\u002f\u0046\u0020"+_geeb .Filter .WriteString ()+"\u000a";};if _geeb .Height !=nil {_ecdb +="\u002f\u0048\u0020"+_geeb .Height .WriteString ()+"\u000a";};if _geeb .ImageMask !=nil {_ecdb +="\u002f\u0049\u004d\u0020"+_geeb .ImageMask .WriteString ()+"\u000a";};if _geeb .Intent !=nil {_ecdb +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_geeb .Intent .WriteString ()+"\u000a";};if _geeb .Interpolate !=nil {_ecdb +="\u002f\u0049\u0020"+_geeb .Interpolate .WriteString ()+"\u000a";};if _geeb .Width !=nil {_ecdb +="\u002f\u0057\u0020"+_geeb .Width .WriteString ()+"\u000a";};_dac .WriteString (_ecdb );_dac .WriteString ("\u0049\u0044\u0020");_dac .Write (_geeb ._gcdf );_dac .WriteString ("\u000a\u0045\u0049\u000a");return _dac .String ();};func (_ccg *ContentStreamParser )parseNumber ()(_bg .PdfObject ,error ){return _bg .ParseNumber (_ccg ._gbff );};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_bdb *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_dgd :=ContentStreamOperation {};_dgd .Operand ="\u0054\u0077";_dgd .Params =_bacdf ([]float64 {wordSpace });_bdb ._ff =append (_bdb ._ff ,&_dgd );return _bdb ;};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_cbd *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_cgd :=ContentStreamOperation {};_cgd .Operand ="\u0054\u0064";_cgd .Params =_bacdf ([]float64 {tx ,ty });_cbd ._ff =append (_cbd ._ff ,&_cgd );return _cbd ;};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_eeaef *ContentStreamOperation ,_bbfa GraphicsState ,_cbc *_gb .PdfPageResources )error ;

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_cced *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_baf :=ContentStreamOperation {};_baf .Operand ="\u006c";_baf .Params =_bacdf ([]float64 {x ,y });_cced ._ff =append (_cced ._ff ,&_baf );return _cced ;};func _edad (_ddg *ContentStreamInlineImage )(*_bg .MultiEncoder ,error ){_gee :=_bg .NewMultiEncoder ();var _aafg *_bg .PdfObjectDictionary ;var _cgb []_bg .PdfObject ;if _gbb :=_ddg .DecodeParms ;_gbb !=nil {_dbce ,_bbc :=_gbb .(*_bg .PdfObjectDictionary );if _bbc {_aafg =_dbce ;};_aga ,_dgfa :=_gbb .(*_bg .PdfObjectArray );if _dgfa {for _ ,_fec :=range _aga .Elements (){if _bda ,_bfg :=_fec .(*_bg .PdfObjectDictionary );_bfg {_cgb =append (_cgb ,_bda );}else {_cgb =append (_cgb ,nil );};};};};_edba :=_ddg .Filter ;if _edba ==nil {return nil ,_af .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_cge ,_agce :=_edba .(*_bg .PdfObjectArray );if !_agce {return nil ,_af .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};for _gef ,_dcg :=range _cge .Elements (){_cfd ,_ddeb :=_dcg .(*_bg .PdfObjectName );if !_ddeb {return nil ,_af .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");};var _gge _bg .PdfObject ;if _aafg !=nil {_gge =_aafg ;}else {if len (_cgb )> 0{if _gef >=len (_cgb ){return nil ,_af .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");};_gge =_cgb [_gef ];};};var _gcce *_bg .PdfObjectDictionary ;if _ded ,_dffa :=_gge .(*_bg .PdfObjectDictionary );_dffa {_gcce =_ded ;};if *_cfd ==_bg .StreamEncodingFilterNameFlate ||*_cfd =="\u0046\u006c"{_dfaa ,_ccb :=_bbb (_ddg ,_gcce );if _ccb !=nil {return nil ,_ccb ;};_gee .AddEncoder (_dfaa );}else if *_cfd ==_bg .StreamEncodingFilterNameLZW {_bfee ,_eeb :=_badb (_ddg ,_gcce );if _eeb !=nil {return nil ,_eeb ;};_gee .AddEncoder (_bfee );}else if *_cfd ==_bg .StreamEncodingFilterNameASCIIHex {_eebg :=_bg .NewASCIIHexEncoder ();_gee .AddEncoder (_eebg );}else if *_cfd ==_bg .StreamEncodingFilterNameASCII85 ||*_cfd =="\u0041\u0038\u0035"{_gbe :=_bg .NewASCII85Encoder ();_gee .AddEncoder (_gbe );}else {_dd .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_cfd );return nil ,_af .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _gee ,nil ;};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fgb *ContentCreator )Add_CS (name _bg .PdfObjectName )*ContentCreator {_bdc :=ContentStreamOperation {};_bdc .Operand ="\u0043\u0053";_bdc .Params =_dce ([]_bg .PdfObjectName {name });_fgb ._ff =append (_fgb ._ff ,&_bdc );return _fgb ;};func (_dcc *ContentStreamProcessor )getColorspace (_acge string ,_gefg *_gb .PdfPageResources )(_gb .PdfColorspace ,error ){switch _acge {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _gb .NewPdfColorspaceDeviceGray (),nil ;case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _gb .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _gb .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _gb .NewPdfColorspaceSpecialPattern (),nil ;};_eacf ,_dgg :=_gefg .GetColorspaceByName (_bg .PdfObjectName (_acge ));if _dgg {return _eacf ,nil ;};switch _acge {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _gb .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _gb .NewPdfColorspaceCalRGB (),nil ;case "\u004c\u0061\u0062":return _gb .NewPdfColorspaceLab (),nil ;};_dd .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_acge );return nil ,_af .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_acge );};func (_efb *ContentStreamProcessor )handleCommand_K (_fag *ContentStreamOperation ,_gfae *_gb .PdfPageResources )error {_aabe :=_gb .NewPdfColorspaceDeviceCMYK ();if len (_fag .Params )!=_aabe .GetNumComponents (){_dd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_dd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fag .Params ),_aabe );return _cc .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_fcae ,_ffcd :=_aabe .ColorFromPdfObjects (_fag .Params );if _ffcd !=nil {return _ffcd ;};_efb ._gbba .ColorspaceStroking =_aabe ;_efb ._gbba .ColorStroking =_fcae ;return nil ;};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ag *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_db :=ContentStreamOperation {};_db .Operand ="\u0077";_db .Params =_bacdf ([]float64 {lineWidth });_ag ._ff =append (_ag ._ff ,&_db );return _ag ;};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ebd *ContentCreator )Add_cs (name _bg .PdfObjectName )*ContentCreator {_afad :=ContentStreamOperation {};_afad .Operand ="\u0063\u0073";_afad .Params =_dce ([]_bg .PdfObjectName {name });_ebd ._ff =append (_ebd ._ff ,&_afad );return _ebd ;};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bcc *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_ddfe :=ContentStreamOperation {};_ddfe .Operand ="\u004d";_ddfe .Params =_bacdf ([]float64 {miterlimit });_bcc ._ff =append (_bcc ._ff ,&_ddfe );return _bcc ;};func (_bbdf *ContentStreamProcessor )handleCommand_cs (_eccg *ContentStreamOperation ,_bdec *_gb .PdfPageResources )error {if len (_eccg .Params )< 1{_dd .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _cc .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_eccg .Params )> 1{_dd .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _cc .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_afc ,_cbba :=_eccg .Params [0].(*_bg .PdfObjectName );if !_cbba {_dd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _cc .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_ebca ,_ggg :=_bbdf .getColorspace (string (*_afc ),_bdec );if _ggg !=nil {return _ggg ;};_bbdf ._gbba .ColorspaceNonStroking =_ebca ;_gadbf ,_ggg :=_bbdf .getInitialColor (_ebca );if _ggg !=nil {return _ggg ;};_bbdf ._gbba .ColorNonStroking =_gadbf ;return nil ;};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_adc *ContentCreator )Bytes ()[]byte {return _adc ._ff .Bytes ()};

// Scale applies x-y scaling to the transformation matrix.
func (_bd *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _bd .Add_cm (sx ,0,0,sy ,0,0);};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_fcee *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_cfb :=ContentStreamInlineImage {};for {_fcee .skipSpaces ();_fcg ,_bed ,_gccf :=_fcee .parseObject ();if _gccf !=nil {return nil ,_gccf ;};if !_bed {_fdg ,_fged :=_bg .GetName (_fcg );if !_fged {_dd .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_fcg );return nil ,_af .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_fcg );};_ecdc ,_fda ,_faf :=_fcee .parseObject ();if _faf !=nil {return nil ,_faf ;};if _fda {return nil ,_af .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};switch *_fdg {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_cfb .BitsPerComponent =_ecdc ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_cfb .ColorSpace =_ecdc ;case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_cfb .Decode =_ecdc ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_cfb .DecodeParms =_ecdc ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_cfb .Filter =_ecdc ;case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_cfb .Height =_ecdc ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_cfb .ImageMask =_ecdc ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_cfb .Intent =_ecdc ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_cfb .Interpolate =_ecdc ;case "\u0057","\u0057\u0069\u0064t\u0068":_cfb .Width =_ecdc ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_dd .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_fdg );default:return nil ,_af .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_fdg );};};if _bed {_fdag ,_ecc :=_fcg .(*_bg .PdfObjectString );if !_ecc {return nil ,_af .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};if _fdag .Str ()=="\u0045\u0049"{_dd .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_cfb ,nil ;}else if _fdag .Str ()=="\u0049\u0044"{_dd .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");_cgbf ,_baca :=_fcee ._gbff .Peek (1);if _baca !=nil {return nil ,_baca ;};if _bg .IsWhiteSpace (_cgbf [0]){_fcee ._gbff .Discard (1);};_cfb ._gcdf =[]byte {};_agcf :=0;var _bafd []byte ;for {_gaa ,_abc :=_fcee ._gbff .ReadByte ();if _abc !=nil {_dd .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");return nil ,_abc ;};if _agcf ==0{if _bg .IsWhiteSpace (_gaa ){_bafd =[]byte {};_bafd =append (_bafd ,_gaa );_agcf =1;}else if _gaa =='E'{_bafd =append (_bafd ,_gaa );_agcf =2;}else {_cfb ._gcdf =append (_cfb ._gcdf ,_gaa );};}else if _agcf ==1{_bafd =append (_bafd ,_gaa );if _gaa =='E'{_agcf =2;}else {_cfb ._gcdf =append (_cfb ._gcdf ,_bafd ...);_bafd =[]byte {};if _bg .IsWhiteSpace (_gaa ){_agcf =1;}else {_agcf =0;};};}else if _agcf ==2{_bafd =append (_bafd ,_gaa );if _gaa =='I'{_agcf =3;}else {_cfb ._gcdf =append (_cfb ._gcdf ,_bafd ...);_bafd =[]byte {};_agcf =0;};}else if _agcf ==3{_bafd =append (_bafd ,_gaa );if _bg .IsWhiteSpace (_gaa ){_dfgb ,_bbd :=_fcee ._gbff .Peek (20);if _bbd !=nil &&_bbd !=_g .EOF {return nil ,_bbd ;};_cab :=NewContentStreamParser (string (_dfgb ));_abd :=true ;for _gdga :=0;_gdga < 3;_gdga ++{_gebc ,_agag ,_daeb :=_cab .parseObject ();if _daeb !=nil {if _daeb ==_g .EOF {break ;};continue ;};if _agag &&!_aab (_gebc .String ()){_abd =false ;break ;};};if _abd {if len (_cfb ._gcdf )> 100{_dd .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_cfb ._gcdf ),_cfb ._gcdf [:100]);}else {_dd .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_cfb ._gcdf ),_cfb ._gcdf );};return &_cfb ,nil ;};};_cfb ._gcdf =append (_cfb ._gcdf ,_bafd ...);_bafd =[]byte {};_agcf =0;};};};};};};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gcag *ContentCreator )Add_g (gray float64 )*ContentCreator {_bgb :=ContentStreamOperation {};_bgb .Operand ="\u0067";_bgb .Params =_bacdf ([]float64 {gray });_gcag ._ff =append (_gcag ._ff ,&_bgb );return _gcag ;};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_eda *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_gaf :=ContentStreamOperation {};_gaf .Operand ="\u0054\u0063";_gaf .Params =_bacdf ([]float64 {charSpace });_eda ._ff =append (_eda ._ff ,&_gaf );return _eda ;};func (_gdfd *ContentStreamProcessor )handleCommand_rg (_edf *ContentStreamOperation ,_fbc *_gb .PdfPageResources )error {_gbae :=_gb .NewPdfColorspaceDeviceRGB ();if len (_edf .Params )!=_gbae .GetNumComponents (){_dd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_dd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_edf .Params ),_gbae );return _cc .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_dcf ,_ebb :=_gbae .ColorFromPdfObjects (_edf .Params );if _ebb !=nil {return _ebb ;};_gdfd ._gbba .ColorspaceNonStroking =_gbae ;_gdfd ._gbba .ColorNonStroking =_dcf ;return nil ;};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ffd *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_dba :=ContentStreamOperation {};_dba .Operand ="\u0064";_dba .Params =[]_bg .PdfObject {};_dba .Params =append (_dba .Params ,_bg .MakeArrayFromIntegers64 (dashArray ));_dba .Params =append (_dba .Params ,_bg .MakeInteger (dashPhase ));_ffd ._ff =append (_ffd ._ff ,&_dba );return _ffd ;};func _badb (_acg *ContentStreamInlineImage ,_eba *_bg .PdfObjectDictionary )(*_bg .LZWEncoder ,error ){_cdg :=_bg .NewLZWEncoder ();if _eba ==nil {if _acg .DecodeParms !=nil {_fdf ,_dbf :=_bg .GetDict (_acg .DecodeParms );if !_dbf {_dd .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_acg .DecodeParms );return nil ,_af .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_eba =_fdf ;};};if _eba ==nil {return _cdg ,nil ;};_bgf :=_eba .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");if _bgf !=nil {_fgd ,_gfab :=_bgf .(*_bg .PdfObjectInteger );if !_gfab {_dd .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_bgf );return nil ,_af .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_fgd !=0&&*_fgd !=1{return nil ,_af .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");};_cdg .EarlyChange =int (*_fgd );}else {_cdg .EarlyChange =1;};_bgf =_eba .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _bgf !=nil {_gdb ,_cege :=_bgf .(*_bg .PdfObjectInteger );if !_cege {_dd .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_bgf );return nil ,_af .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_cdg .Predictor =int (*_gdb );};_bgf =_eba .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _bgf !=nil {_bde ,_aae :=_bgf .(*_bg .PdfObjectInteger );if !_aae {_dd .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_af .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_cdg .BitsPerComponent =int (*_bde );};if _cdg .Predictor > 1{_cdg .Columns =1;_bgf =_eba .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _bgf !=nil {_gfag ,_afdd :=_bgf .(*_bg .PdfObjectInteger );if !_afdd {return nil ,_af .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_cdg .Columns =int (*_gfag );};_cdg .Colors =1;_bgf =_eba .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _bgf !=nil {_cgfa ,_cba :=_bgf .(*_bg .PdfObjectInteger );if !_cba {return nil ,_af .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_cdg .Colors =int (*_cgfa );};};_dd .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_eba .String ());return _cdg ,nil ;};func _ffeg (_acde _gb .PdfColorspace )bool {_ ,_ggef :=_acde .(*_gb .PdfColorspaceSpecialPattern );return _ggef ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_ddbc *ContentStreamInlineImage )IsMask ()(bool ,error ){if _ddbc .ImageMask !=nil {_afe ,_ece :=_ddbc .ImageMask .(*_bg .PdfObjectBool );if !_ece {_dd .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");return false ,_cc .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_afe ),nil ;};return false ,nil ;};func _aab (_gea string )bool {_ ,_fgc :=_fcgf [_gea ];return _fgc };func (_gcaa *ContentStreamProcessor )handleCommand_SCN (_egge *ContentStreamOperation ,_fdge *_gb .PdfPageResources )error {_cdcg :=_gcaa ._gbba .ColorspaceStroking ;if !_ffeg (_cdcg ){if len (_egge .Params )!=_cdcg .GetNumComponents (){_dd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_dd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_egge .Params ),_cdcg );return _cc .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_ffgg ,_eee :=_cdcg .ColorFromPdfObjects (_egge .Params );if _eee !=nil {return _eee ;};_gcaa ._gbba .ColorStroking =_ffgg ;return nil ;};

// Push pushes `gs` on the `gsStack`.
func (_cag *GraphicStateStack )Push (gs GraphicsState ){*_cag =append (*_cag ,gs )};

// String returns `ops.Bytes()` as a string.
func (_fgf *ContentStreamOperations )String ()string {return string (_fgf .Bytes ())};func _ddef (_dfde _bg .PdfObject )(_gb .PdfColorspace ,error ){_aade ,_fde :=_dfde .(*_bg .PdfObjectArray );if !_fde {_dd .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_dfde );return nil ,_cc .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _aade .Len ()!=4{_dd .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_aade .Len ());return nil ,_cc .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_baffa ,_fde :=_aade .Get (0).(*_bg .PdfObjectName );if !_fde {_dd .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_aade );return nil ,_cc .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_baffa !="\u0049"&&*_baffa !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_dd .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_baffa );return nil ,_cc .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_baffa ,_fde =_aade .Get (1).(*_bg .PdfObjectName );if !_fde {_dd .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_aade );return nil ,_cc .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_baffa !="\u0047"&&*_baffa !="\u0052\u0047\u0042"&&*_baffa !="\u0043\u004d\u0059\u004b"&&*_baffa !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_baffa !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_baffa !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_dd .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_baffa );return nil ,_cc .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_fgfb :="";switch *_baffa {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_fgfb ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_fgfb ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_fgfb ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";};_cdea :=_bg .MakeArray (_bg .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_bg .MakeName (_fgfb ),_aade .Get (2),_aade .Get (3));return _gb .NewPdfColorspaceFromPdfObject (_cdea );};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _gb .PdfColorspace ;ColorspaceNonStroking _gb .PdfColorspace ;ColorStroking _gb .PdfColor ;ColorNonStroking _gb .PdfColor ;CTM _ce .Matrix ;};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_dbae *ContentCreator )Add_ri (intent _bg .PdfObjectName )*ContentCreator {_daa :=ContentStreamOperation {};_daa .Operand ="\u0072\u0069";_daa .Params =_dce ([]_bg .PdfObjectName {intent });_dbae ._ff =append (_dbae ._ff ,&_daa );return _dbae ;};func (_eeaa *ContentStreamProcessor )handleCommand_g (_becd *ContentStreamOperation ,_febb *_gb .PdfPageResources )error {_fecd :=_gb .NewPdfColorspaceDeviceGray ();if len (_becd .Params )!=_fecd .GetNumComponents (){_dd .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");_dd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_becd .Params ),_fecd );return _cc .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_gcae ,_acfc :=_fecd .ColorFromPdfObjects (_becd .Params );if _acfc !=nil {_dd .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_fecd ,_becd ,_acfc );return _acfc ;};_eeaa ._gbba .ColorspaceNonStroking =_fecd ;_eeaa ._gbba .ColorNonStroking =_gcae ;return nil ;};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ddb *ContentCreator )Add_h ()*ContentCreator {_fb :=ContentStreamOperation {};_fb .Operand ="\u0068";_ddb ._ff =append (_ddb ._ff ,&_fb );return _ddb ;};func (_fbee *ContentStreamParser )parseName ()(_bg .PdfObjectName ,error ){_ebc :="";_cgcf :=false ;for {_ecf ,_bdbga :=_fbee ._gbff .Peek (1);if _bdbga ==_g .EOF {break ;};if _bdbga !=nil {return _bg .PdfObjectName (_ebc ),_bdbga ;};if !_cgcf {if _ecf [0]=='/'{_cgcf =true ;_fbee ._gbff .ReadByte ();}else {_dd .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_ecf ,_ecf );return _bg .PdfObjectName (_ebc ),_af .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_ecf [0]);};}else {if _bg .IsWhiteSpace (_ecf [0]){break ;}else if (_ecf [0]=='/')||(_ecf [0]=='[')||(_ecf [0]=='(')||(_ecf [0]==']')||(_ecf [0]=='<')||(_ecf [0]=='>'){break ;}else if _ecf [0]=='#'{_cbfdc ,_dee :=_fbee ._gbff .Peek (3);if _dee !=nil {return _bg .PdfObjectName (_ebc ),_dee ;};_fbee ._gbff .Discard (3);_dcgg ,_dee :=_a .DecodeString (string (_cbfdc [1:3]));if _dee !=nil {return _bg .PdfObjectName (_ebc ),_dee ;};_ebc +=string (_dcgg );}else {_ccf ,_ :=_fbee ._gbff .ReadByte ();_ebc +=string (_ccf );};};};return _bg .PdfObjectName (_ebc ),nil ;};func (_dad *ContentStreamProcessor )handleCommand_sc (_dafg *ContentStreamOperation ,_fffbd *_gb .PdfPageResources )error {_eefdc :=_dad ._gbba .ColorspaceNonStroking ;if !_ffeg (_eefdc ){if len (_dafg .Params )!=_eefdc .GetNumComponents (){_dd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_dd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dafg .Params ),_eefdc );return _cc .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_fcd ,_gbc :=_eefdc .ColorFromPdfObjects (_dafg .Params );if _gbc !=nil {return _gbc ;};_dad ._gbba .ColorNonStroking =_fcd ;return nil ;};func _fgcf (_bab []int64 )[]_bg .PdfObject {var _dbbc []_bg .PdfObject ;for _ ,_abe :=range _bab {_dbbc =append (_dbbc ,_bg .MakeInteger (_abe ));};return _dbbc ;};func (_abf *ContentStreamParser )parseNull ()(_bg .PdfObjectNull ,error ){_ ,_ggea :=_abf ._gbff .Discard (4);return _bg .PdfObjectNull {},_ggea ;};type handlerEntry struct{Condition HandlerConditionEnum ;Operand string ;Handler HandlerFunc ;};

// Operations returns the list of operations.
func (_cb *ContentCreator )Operations ()*ContentStreamOperations {return &_cb ._ff };var (ErrInvalidOperand =_cc .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064"););const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_bg .PdfObject ;Operand string ;};func (_eef *ContentStreamInlineImage )String ()string {_fga :=_af .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_eef ._gcdf ));if _eef .BitsPerComponent !=nil {_fga +="\u002d\u0020\u0042\u0050\u0043\u0020"+_eef .BitsPerComponent .WriteString ()+"\u000a";};if _eef .ColorSpace !=nil {_fga +="\u002d\u0020\u0043S\u0020"+_eef .ColorSpace .WriteString ()+"\u000a";};if _eef .Decode !=nil {_fga +="\u002d\u0020\u0044\u0020"+_eef .Decode .WriteString ()+"\u000a";};if _eef .DecodeParms !=nil {_fga +="\u002d\u0020\u0044P\u0020"+_eef .DecodeParms .WriteString ()+"\u000a";};if _eef .Filter !=nil {_fga +="\u002d\u0020\u0046\u0020"+_eef .Filter .WriteString ()+"\u000a";};if _eef .Height !=nil {_fga +="\u002d\u0020\u0048\u0020"+_eef .Height .WriteString ()+"\u000a";};if _eef .ImageMask !=nil {_fga +="\u002d\u0020\u0049M\u0020"+_eef .ImageMask .WriteString ()+"\u000a";};if _eef .Intent !=nil {_fga +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_eef .Intent .WriteString ()+"\u000a";};if _eef .Interpolate !=nil {_fga +="\u002d\u0020\u0049\u0020"+_eef .Interpolate .WriteString ()+"\u000a";};if _eef .Width !=nil {_fga +="\u002d\u0020\u0057\u0020"+_eef .Width .WriteString ()+"\u000a";};return _fga ;};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_eg *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_cf :=ContentStreamOperation {};_cf .Operand ="\u0054\u0044";_cf .Params =_bacdf ([]float64 {tx ,ty });_eg ._ff =append (_eg ._ff ,&_cf );return _eg ;};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_ccfg *GraphicStateStack )Pop ()GraphicsState {_bff :=(*_ccfg )[len (*_ccfg )-1];*_ccfg =(*_ccfg )[:len (*_ccfg )-1];return _bff ;};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_aac *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_gca :=ContentStreamOperation {};_gca .Operand ="\u0072\u0065";_gca .Params =_bacdf ([]float64 {x ,y ,width ,height });_aac ._ff =append (_aac ._ff ,&_gca );return _aac ;};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_cea *ContentCreator )Add_BMC (tag _bg .PdfObjectName )*ContentCreator {_fbe :=ContentStreamOperation {};_fbe .Operand ="\u0042\u004d\u0043";_fbe .Params =_dce ([]_bg .PdfObjectName {tag });_cea ._ff =append (_cea ._ff ,&_fbe );return _cea ;};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cce *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_efc :=ContentStreamOperation {};_efc .Operand ="\u004a";_efc .Params =_dce ([]_bg .PdfObjectName {_bg .PdfObjectName (lineCapStyle )});_cce ._ff =append (_cce ._ff ,&_efc );return _cce ;};

// GetEncoder returns the encoder of the inline image.
func (_cee *ContentStreamInlineImage )GetEncoder ()(_bg .StreamEncoder ,error ){return _cbb (_cee )};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dbc *ContentCreator )Add_n ()*ContentCreator {_bf :=ContentStreamOperation {};_bf .Operand ="\u006e";_dbc ._ff =append (_dbc ._ff ,&_bf );return _dbc ;};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_dae *ContentCreator )Add_BT ()*ContentCreator {_afb :=ContentStreamOperation {};_afb .Operand ="\u0042\u0054";_dae ._ff =append (_dae ._ff ,&_afb );return _dae ;};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_efcb *ContentCreator )Add_quotes (textstr _bg .PdfObjectString ,aw ,ac float64 )*ContentCreator {_dbd :=ContentStreamOperation {};_dbd .Operand ="\u0022";_dbd .Params =_bacdf ([]float64 {aw ,ac });_dbd .Params =append (_dbd .Params ,_beac ([]_bg .PdfObjectString {textstr })...);_efcb ._ff =append (_efcb ._ff ,&_dbd );return _efcb ;};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fd *ContentCreator )Add_f ()*ContentCreator {_adf :=ContentStreamOperation {};_adf .Operand ="\u0066";_fd ._ff =append (_fd ._ff ,&_adf );return _fd ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bcd *ContentCreator )Add_B_starred ()*ContentCreator {_fcc :=ContentStreamOperation {};_fcc .Operand ="\u0042\u002a";_bcd ._ff =append (_bcd ._ff ,&_fcc );return _bcd ;};func (_ebad *ContentStreamProcessor )getInitialColor (_bgaf _gb .PdfColorspace )(_gb .PdfColor ,error ){switch _bfge :=_bgaf .(type ){case *_gb .PdfColorspaceDeviceGray :return _gb .NewPdfColorDeviceGray (0.0),nil ;case *_gb .PdfColorspaceDeviceRGB :return _gb .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_gb .PdfColorspaceDeviceCMYK :return _gb .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_gb .PdfColorspaceCalGray :return _gb .NewPdfColorCalGray (0.0),nil ;case *_gb .PdfColorspaceCalRGB :return _gb .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_gb .PdfColorspaceLab :_dfga :=0.0;_deda :=0.0;_cgabd :=0.0;if _bfge .Range [0]> 0{_dfga =_bfge .Range [0];};if _bfge .Range [2]> 0{_deda =_bfge .Range [2];};return _gb .NewPdfColorLab (_dfga ,_deda ,_cgabd ),nil ;case *_gb .PdfColorspaceICCBased :if _bfge .Alternate ==nil {_dd .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_bfge .N );if _bfge .N ==1{_dd .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _ebad .getInitialColor (_gb .NewPdfColorspaceDeviceGray ());}else if _bfge .N ==3{_dd .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");return _ebad .getInitialColor (_gb .NewPdfColorspaceDeviceRGB ());}else if _bfge .N ==4{_dd .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");return _ebad .getInitialColor (_gb .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_cc .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");};};return _ebad .getInitialColor (_bfge .Alternate );case *_gb .PdfColorspaceSpecialIndexed :if _bfge .Base ==nil {return nil ,_cc .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");};return _ebad .getInitialColor (_bfge .Base );case *_gb .PdfColorspaceSpecialSeparation :if _bfge .AlternateSpace ==nil {return nil ,_cc .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _ebad .getInitialColor (_bfge .AlternateSpace );case *_gb .PdfColorspaceDeviceN :if _bfge .AlternateSpace ==nil {return nil ,_cc .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _ebad .getInitialColor (_bfge .AlternateSpace );case *_gb .PdfColorspaceSpecialPattern :return nil ,nil ;};_dd .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_bgaf );return nil ,_cc .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};func (_cbfd *ContentStreamParser )skipComments ()error {if _ ,_dgc :=_cbfd .skipSpaces ();_dgc !=nil {return _dgc ;};_dbg :=true ;for {_gad ,_gfgd :=_cbfd ._gbff .Peek (1);if _gfgd !=nil {_dd .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_gfgd .Error ());return _gfgd ;};if _dbg &&_gad [0]!='%'{return nil ;};_dbg =false ;if (_gad [0]!='\r')&&(_gad [0]!='\n'){_cbfd ._gbff .ReadByte ();}else {break ;};};return _cbfd .skipComments ();};

// AddOperand adds a specified operand.
func (_ec *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_ec ._ff =append (_ec ._ff ,&op );return _ec ;};func (_fecf *ContentStreamProcessor )handleCommand_RG (_fbeb *ContentStreamOperation ,_fdgb *_gb .PdfPageResources )error {_decb :=_gb .NewPdfColorspaceDeviceRGB ();if len (_fbeb .Params )!=_decb .GetNumComponents (){_dd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");_dd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fbeb .Params ),_decb );return _cc .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_cdcb ,_feba :=_decb .ColorFromPdfObjects (_fbeb .Params );if _feba !=nil {return _feba ;};_fecf ._gbba .ColorspaceStroking =_decb ;_fecf ._gbba .ColorStroking =_cdcb ;return nil ;};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_def *ContentStreamInlineImage )ToImage (resources *_gb .PdfPageResources )(*_gb .Image ,error ){_afec ,_eade :=_def .toImageBase (resources );if _eade !=nil {return nil ,_eade ;};_eafg ,_eade :=_cbb (_def );if _eade !=nil {return nil ,_eade ;};_dd .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_eafg ,_eafg );_dd .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_def );_becb ,_eade :=_eafg .DecodeBytes (_def ._gcdf );if _eade !=nil {return nil ,_eade ;};_geeg :=&_gb .Image {Width :int64 (_afec .Width ),Height :int64 (_afec .Height ),BitsPerComponent :int64 (_afec .BitsPerComponent ),ColorComponents :_afec .ColorComponents ,Data :_becb };if len (_afec .Decode )> 0{for _cffd :=0;_cffd < len (_afec .Decode );_cffd ++{_afec .Decode [_cffd ]*=float64 ((int (1)<<uint (_afec .BitsPerComponent ))-1);};_geeg .SetDecode (_afec .Decode );};return _geeg ,nil ;};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_eddc *ContentCreator )Add_f_starred ()*ContentCreator {_affa :=ContentStreamOperation {};_affa .Operand ="\u0066\u002a";_eddc ._ff =append (_eddc ._ff ,&_affa );return _eddc ;};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_dda *ContentCreator )Add_q ()*ContentCreator {_dgf :=ContentStreamOperation {};_dgf .Operand ="\u0071";_dda ._ff =append (_dda ._ff ,&_dgf );return _dda ;};

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dbb *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_fgbd :=ContentStreamOperation {};_fgbd .Operand ="\u0052\u0047";_fgbd .Params =_bacdf ([]float64 {r ,g ,b });_dbb ._ff =append (_dbb ._ff ,&_fgbd );return _dbb ;};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_df *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_fa :=ContentStreamOperation {};_fa .Operand ="\u006a";_fa .Params =_dce ([]_bg .PdfObjectName {_bg .PdfObjectName (lineJoinStyle )});_df ._ff =append (_df ._ff ,&_fa );return _df ;};

// RotateDeg applies a rotation to the transformation matrix.
func (_acd *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_bc :=_gf .Cos (angle *_gf .Pi /180.0);_aea :=_gf .Sin (angle *_gf .Pi /180.0);_ga :=-_gf .Sin (angle *_gf .Pi /180.0);_aeef :=_gf .Cos (angle *_gf .Pi /180.0);return _acd .Add_cm (_bc ,_aea ,_ga ,_aeef ,0,0);};func (_eag *ContentStreamParser )parseObject ()(_bea _bg .PdfObject ,_ddd bool ,_bfcg error ){_eag .skipSpaces ();for {_fgeac ,_cfbf :=_eag ._gbff .Peek (2);if _cfbf !=nil {return nil ,false ,_cfbf ;};_dd .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_fgeac ));if _fgeac [0]=='%'{_eag .skipComments ();continue ;}else if _fgeac [0]=='/'{_dbga ,_eaef :=_eag .parseName ();_dd .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_dbga );return &_dbga ,false ,_eaef ;}else if _fgeac [0]=='('{_dd .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");_efe ,_abfa :=_eag .parseString ();return _efe ,false ,_abfa ;}else if _fgeac [0]=='<'&&_fgeac [1]!='<'{_dd .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_gcdg ,_eeda :=_eag .parseHexString ();return _gcdg ,false ,_eeda ;}else if _fgeac [0]=='['{_dd .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_agad ,_eeae :=_eag .parseArray ();return _agad ,false ,_eeae ;}else if _bg .IsFloatDigit (_fgeac [0])||(_fgeac [0]=='-'&&_bg .IsFloatDigit (_fgeac [1])){_dd .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_eada ,_deee :=_eag .parseNumber ();return _eada ,false ,_deee ;}else if _fgeac [0]=='<'&&_fgeac [1]=='<'{_afgg ,_gbaae :=_eag .parseDict ();return _afgg ,false ,_gbaae ;}else {_dd .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_fgeac ,_ =_eag ._gbff .Peek (5);_aba :=string (_fgeac );_dd .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_aba );if (len (_aba )> 3)&&(_aba [:4]=="\u006e\u0075\u006c\u006c"){_dffc ,_bddg :=_eag .parseNull ();return &_dffc ,false ,_bddg ;}else if (len (_aba )> 4)&&(_aba [:5]=="\u0066\u0061\u006cs\u0065"){_dddd ,_gfe :=_eag .parseBool ();return &_dddd ,false ,_gfe ;}else if (len (_aba )> 3)&&(_aba [:4]=="\u0074\u0072\u0075\u0065"){_abae ,_ced :=_eag .parseBool ();return &_abae ,false ,_ced ;};_affe ,_cgec :=_eag .parseOperand ();if _cgec !=nil {return _affe ,false ,_cgec ;};if len (_affe .String ())< 1{return _affe ,false ,ErrInvalidOperand ;};return _affe ,true ,nil ;};};};func (_bacb *ContentStreamParser )parseArray ()(*_bg .PdfObjectArray ,error ){_ccdg :=_bg .MakeArray ();_bacb ._gbff .ReadByte ();for {_bacb .skipSpaces ();_bfc ,_ecdbd :=_bacb ._gbff .Peek (1);if _ecdbd !=nil {return _ccdg ,_ecdbd ;};if _bfc [0]==']'{_bacb ._gbff .ReadByte ();break ;};_fcgc ,_ ,_ecdbd :=_bacb .parseObject ();if _ecdbd !=nil {return _ccdg ,_ecdbd ;};_ccdg .Append (_fcgc );};return _ccdg ,nil ;};func (_ecb *ContentStreamParser )parseString ()(*_bg .PdfObjectString ,error ){_ecb ._gbff .ReadByte ();var _cgab []byte ;_eac :=1;for {_aaa ,_fee :=_ecb ._gbff .Peek (1);if _fee !=nil {return _bg .MakeString (string (_cgab )),_fee ;};if _aaa [0]=='\\'{_ecb ._gbff .ReadByte ();_gdfc ,_gbaa :=_ecb ._gbff .ReadByte ();if _gbaa !=nil {return _bg .MakeString (string (_cgab )),_gbaa ;};if _bg .IsOctalDigit (_gdfc ){_ddaa ,_cffe :=_ecb ._gbff .Peek (2);if _cffe !=nil {return _bg .MakeString (string (_cgab )),_cffe ;};var _fbd []byte ;_fbd =append (_fbd ,_gdfc );for _ ,_gcgd :=range _ddaa {if _bg .IsOctalDigit (_gcgd ){_fbd =append (_fbd ,_gcgd );}else {break ;};};_ecb ._gbff .Discard (len (_fbd )-1);_dd .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_fbd );_agdb ,_cffe :=_f .ParseUint (string (_fbd ),8,32);if _cffe !=nil {return _bg .MakeString (string (_cgab )),_cffe ;};_cgab =append (_cgab ,byte (_agdb ));continue ;};switch _gdfc {case 'n':_cgab =append (_cgab ,'\n');case 'r':_cgab =append (_cgab ,'\r');case 't':_cgab =append (_cgab ,'\t');case 'b':_cgab =append (_cgab ,'\b');case 'f':_cgab =append (_cgab ,'\f');case '(':_cgab =append (_cgab ,'(');case ')':_cgab =append (_cgab ,')');case '\\':_cgab =append (_cgab ,'\\');};continue ;}else if _aaa [0]=='('{_eac ++;}else if _aaa [0]==')'{_eac --;if _eac ==0{_ecb ._gbff .ReadByte ();break ;};};_ddba ,_ :=_ecb ._gbff .ReadByte ();_cgab =append (_cgab ,_ddba );};return _bg .MakeString (string (_cgab )),nil ;};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_decg *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_fcaa :=ContentStreamOperation {};_fcaa .Operand ="\u004b";_fcaa .Params =_bacdf ([]float64 {c ,m ,y ,k });_decg ._ff =append (_decg ._ff ,&_fcaa );return _decg ;};func (_baff *ContentStreamParser )parseHexString ()(*_bg .PdfObjectString ,error ){_baff ._gbff .ReadByte ();_acga :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");var _gcda []byte ;for {_baff .skipSpaces ();_dfba ,_bacd :=_baff ._gbff .Peek (1);if _bacd !=nil {return _bg .MakeString (""),_bacd ;};if _dfba [0]=='>'{_baff ._gbff .ReadByte ();break ;};_adb ,_ :=_baff ._gbff .ReadByte ();if _gc .IndexByte (_acga ,_adb )>=0{_gcda =append (_gcda ,_adb );};};if len (_gcda )%2==1{_gcda =append (_gcda ,'0');};_cbaa ,_ :=_a .DecodeString (string (_gcda ));return _bg .MakeHexString (string (_cbaa )),nil ;};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _bg .PdfObject ;ColorSpace _bg .PdfObject ;Decode _bg .PdfObject ;DecodeParms _bg .PdfObject ;Filter _bg .PdfObject ;Height _bg .PdfObject ;ImageMask _bg .PdfObject ;Intent _bg .PdfObject ;Interpolate _bg .PdfObject ;Width _bg .PdfObject ;_gcdf []byte ;_agd *_aff .ImageBase ;};func (_effe *ContentStreamParser )parseOperand ()(*_bg .PdfObjectString ,error ){var _bbeg []byte ;for {_efg ,_efdc :=_effe ._gbff .Peek (1);if _efdc !=nil {return _bg .MakeString (string (_bbeg )),_efdc ;};if _bg .IsDelimiter (_efg [0]){break ;};if _bg .IsWhiteSpace (_efg [0]){break ;};_abca ,_ :=_effe ._gbff .ReadByte ();_bbeg =append (_bbeg ,_abca );};return _bg .MakeString (string (_bbeg )),nil ;};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_fe *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_fe )==0{return _fe ;};if _fe .isWrapped (){return _fe ;};*_fe =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_fe ...);_gg :=0;for _ ,_gd :=range *_fe {if _gd .Operand =="\u0071"{_gg ++;}else if _gd .Operand =="\u0051"{_gg --;};};for _gg > 0{*_fe =append (*_fe ,&ContentStreamOperation {Operand :"\u0051"});_gg --;};return _fe ;};func (_aaae *ContentStreamProcessor )handleCommand_k (_cgfb *ContentStreamOperation ,_dgee *_gb .PdfPageResources )error {_bbfb :=_gb .NewPdfColorspaceDeviceCMYK ();if len (_cgfb .Params )!=_bbfb .GetNumComponents (){_dd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_dd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cgfb .Params ),_bbfb );return _cc .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_beb ,_cdf :=_bbfb .ColorFromPdfObjects (_cgfb .Params );if _cdf !=nil {return _cdf ;};_aaae ._gbba .ColorspaceNonStroking =_bbfb ;_aaae ._gbba .ColorNonStroking =_beb ;return nil ;};

// Transform returns coordinates x, y transformed by the CTM.
func (_gbda *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _gbda .CTM .Transform (x ,y );};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_facf *ContentCreator )SetStrokingColor (color _gb .PdfColor )*ContentCreator {switch _eae :=color .(type ){case *_gb .PdfColorDeviceGray :_facf .Add_G (_eae .Val ());case *_gb .PdfColorDeviceRGB :_facf .Add_RG (_eae .R (),_eae .G (),_eae .B ());case *_gb .PdfColorDeviceCMYK :_facf .Add_K (_eae .C (),_eae .M (),_eae .Y (),_eae .K ());default:_dd .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_eae );};return _facf ;};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_dgb *ContentCreator )Add_sh (name _bg .PdfObjectName )*ContentCreator {_aed :=ContentStreamOperation {};_aed .Operand ="\u0073\u0068";_aed .Params =_dce ([]_bg .PdfObjectName {name });_dgb ._ff =append (_dgb ._ff ,&_aed );return _dgb ;};func _bacdf (_efbc []float64 )[]_bg .PdfObject {var _dbdc []_bg .PdfObject ;for _ ,_afce :=range _efbc {_dbdc =append (_dbdc ,_bg .MakeFloat (_afce ));};return _dbdc ;};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bceb *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_bdg :=ContentStreamOperation {};_bdg .Operand ="\u006d";_bdg .Params =_bacdf ([]float64 {x ,y });_bceb ._ff =append (_bceb ._ff ,&_bdg );return _bceb ;};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;
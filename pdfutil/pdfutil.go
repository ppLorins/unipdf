//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_a "github.com/pplorins/unipdf/v3/common";_d "github.com/pplorins/unipdf/v3/contentstream";_ag "github.com/pplorins/unipdf/v3/contentstream/draw";_f "github.com/pplorins/unipdf/v3/core";_e "github.com/pplorins/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_e .PdfPage )error {_ef ,_ad :=page .GetMediaBox ();if _ad !=nil {return _ad ;};_g :=page .Rotate ;_agf :=_g !=nil &&*_g %360!=0&&*_g %90==0;_ef .Normalize ();_gb ,_gf ,_gbb ,_ga :=_ef .Llx ,_ef .Lly ,_ef .Width (),_ef .Height ();_ab :=_gb !=0||_gf !=0;if !_agf &&!_ab {return nil ;};_be :=func (_eb ,_bb ,_ea float64 )_ag .BoundingBox {return _ag .Path {Points :[]_ag .Point {_ag .NewPoint (0,0).Rotate (_ea ),_ag .NewPoint (_eb ,0).Rotate (_ea ),_ag .NewPoint (0,_bb ).Rotate (_ea ),_ag .NewPoint (_eb ,_bb ).Rotate (_ea )}}.GetBoundingBox ();};_ge :=_d .NewContentCreator ();var _c float64 ;if _agf {_c =-float64 (*page .Rotate );_dd :=_be (_gbb ,_ga ,_c );_ge .Translate ((_dd .Width -_gbb )/2+_gbb /2,(_dd .Height -_ga )/2+_ga /2);_ge .RotateDeg (_c );_ge .Translate (-_gbb /2,-_ga /2);_gbb ,_ga =_dd .Width ,_dd .Height ;};if _ab {_ge .Translate (-_gb ,-_gf );};_ed :=_ge .Operations ();_da ,_ad :=_f .MakeStream (_ed .Bytes (),_f .NewFlateEncoder ());if _ad !=nil {return _ad ;};_age :=_f .MakeArray (_da );_age .Append (page .GetContentStreamObjs ()...);*_ef =_e .PdfRectangle {Urx :_gbb ,Ury :_ga };if _fg :=page .CropBox ;_fg !=nil {_fg .Normalize ();_ebd ,_af ,_eac ,_fc :=_fg .Llx -_gb ,_fg .Lly -_gf ,_fg .Width (),_fg .Height ();if _agf {_agg :=_be (_eac ,_fc ,_c );_eac ,_fc =_agg .Width ,_agg .Height ;};*_fg =_e .PdfRectangle {Llx :_ebd ,Lly :_af ,Urx :_ebd +_eac ,Ury :_af +_fc };};_a .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_c ,_ed ,_ef );page .Contents =_age ;page .Rotate =nil ;return nil ;};
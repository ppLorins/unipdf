//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_e "bufio";_b "bytes";_c "errors";_g "fmt";_fc "github.com/pplorins/unipdf/v3/common";_bg "github.com/pplorins/unipdf/v3/core";_a "io";_ab "math";);func (_bgde *PSOperand )ln (_gfdf *PSStack )error {_gefb ,_dac :=_gfdf .PopNumberAsFloat64 ();if _dac !=nil {return _dac ;};_gec :=_ab .Log (_gefb );_dac =_gfdf .Push (MakeReal (_gec ));return _dac ;};func (_fa *PSInteger )DebugString ()string {return _g .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_fa .Val );};var ErrTypeCheck =_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");func (_cbd *PSInteger )Duplicate ()PSObject {_dec :=PSInteger {};_dec .Val =_cbd .Val ;return &_dec };func (_aa *PSReal )DebugString ()string {return _g .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_aa .Val );};func (_eb *PSOperand )eq (_efbb *PSStack )error {_edafg ,_feb :=_efbb .Pop ();if _feb !=nil {return _feb ;};_ega ,_feb :=_efbb .Pop ();if _feb !=nil {return _feb ;};_bfb ,_dfd :=_edafg .(*PSBoolean );_acdg ,_bfa :=_ega .(*PSBoolean );if _dfd ||_bfa {var _efbg error ;if _dfd &&_bfa {_efbg =_efbb .Push (MakeBool (_bfb .Val ==_acdg .Val ));}else {_efbg =_efbb .Push (MakeBool (false ));};return _efbg ;};var _fdgf float64 ;var _caa float64 ;if _cbf ,_eac :=_edafg .(*PSInteger );_eac {_fdgf =float64 (_cbf .Val );}else if _aace ,_bbe :=_edafg .(*PSReal );_bbe {_fdgf =_aace .Val ;}else {return ErrTypeCheck ;};if _cgad ,_ec :=_ega .(*PSInteger );_ec {_caa =float64 (_cgad .Val );}else if _eef ,_fdd :=_ega .(*PSReal );_fdd {_caa =_eef .Val ;}else {return ErrTypeCheck ;};if _ab .Abs (_caa -_fdgf )< _bb {_feb =_efbb .Push (MakeBool (true ));}else {_feb =_efbb .Push (MakeBool (false ));};return _feb ;};func (_acd *PSOperand )abs (_edf *PSStack )error {_fgf ,_cgb :=_edf .Pop ();if _cgb !=nil {return _cgb ;};if _df ,_gfa :=_fgf .(*PSReal );_gfa {_bba :=_df .Val ;if _bba < 0{_cgb =_edf .Push (MakeReal (-_bba ));}else {_cgb =_edf .Push (MakeReal (_bba ));};}else if _gfc ,_eda :=_fgf .(*PSInteger );_eda {_cdf :=_gfc .Val ;if _cdf < 0{_cgb =_edf .Push (MakeInteger (-_cdf ));}else {_cgb =_edf .Push (MakeInteger (_cdf ));};}else {return ErrTypeCheck ;};return _cgb ;};

// PSParser is a basic Postscript parser.
type PSParser struct{_acab *_e .Reader };

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _ef []float64 ;for _ ,_af :=range objects {if _ce ,_gd :=_af .(*PSInteger );_gd {_ef =append (_ef ,float64 (_ce .Val ));}else if _be ,_de :=_af .(*PSReal );_de {_ef =append (_ef ,_be .Val );}else {return nil ,ErrTypeCheck ;};};return _ef ,nil ;};func (_bgcf *PSParser )parseOperand ()(*PSOperand ,error ){var _ddda []byte ;for {_gcb ,_acdf :=_bgcf ._acab .Peek (1);if _acdf !=nil {if _acdf ==_a .EOF {break ;};return nil ,_acdf ;};if _bg .IsDelimiter (_gcb [0]){break ;};if _bg .IsWhiteSpace (_gcb [0]){break ;};_gbd ,_ :=_bgcf ._acab .ReadByte ();_ddda =append (_ddda ,_gbd );};if len (_ddda )==0{return nil ,_c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};return MakeOperand (string (_ddda )),nil ;};func (_cdea *PSOperand )floor (_edc *PSStack )error {_edfe ,_dgae :=_edc .Pop ();if _dgae !=nil {return _dgae ;};if _ebg ,_dbf :=_edfe .(*PSReal );_dbf {_dgae =_edc .Push (MakeReal (_ab .Floor (_ebg .Val )));}else if _eba ,_feg :=_edfe .(*PSInteger );_feg {_dgae =_edc .Push (MakeInteger (_eba .Val ));}else {return ErrTypeCheck ;};return _dgae ;};func (_abgee *PSOperand )sin (_fbba *PSStack )error {_cdebg ,_ebab :=_fbba .PopNumberAsFloat64 ();if _ebab !=nil {return _ebab ;};_feece :=_ab .Sin (_cdebg *_ab .Pi /180.0);_ebab =_fbba .Push (MakeReal (_feece ));return _ebab ;};

// Pop pops an object from the top of the stack.
func (_egb *PSStack )Pop ()(PSObject ,error ){if len (*_egb )< 1{return nil ,ErrStackUnderflow ;};_fcbce :=(*_egb )[len (*_egb )-1];*_egb =(*_egb )[0:len (*_egb )-1];return _fcbce ,nil ;};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_abd :=PSInteger {};_abd .Val =val ;return &_abd };func (_deca *PSOperand )log (_daeb *PSStack )error {_ddaf ,_cgf :=_daeb .PopNumberAsFloat64 ();if _cgf !=nil {return _cgf ;};_fdgg :=_ab .Log10 (_ddaf );_cgf =_daeb .Push (MakeReal (_fdgg ));return _cgf ;};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_bcc *PSStack )PopInteger ()(int ,error ){_bgcfd ,_bbba :=_bcc .Pop ();if _bbba !=nil {return 0,_bbba ;};if _gcbb ,_dbgb :=_bgcfd .(*PSInteger );_dbgb {return _gcbb .Val ,nil ;};return 0,ErrTypeCheck ;};var ErrStackUnderflow =_c .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_cc *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_fd :=range objects {_ac :=_cc .Stack .Push (_fd );if _ac !=nil {return nil ,_ac ;};};_cb :=_cc ._fg .Exec (_cc .Stack );if _cb !=nil {_fc .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_cb );return nil ,_cb ;};_ceb :=[]PSObject (*_cc .Stack );_cc .Stack .Empty ();return _ceb ,nil ;};func (_gfb *PSOperand )ifelse (_gdfd *PSStack )error {_fcdg ,_fee :=_gdfd .Pop ();if _fee !=nil {return _fee ;};_fed ,_fee :=_gdfd .Pop ();if _fee !=nil {return _fee ;};_bbbc ,_fee :=_gdfd .Pop ();if _fee !=nil {return _fee ;};_bcb ,_dee :=_fcdg .(*PSProgram );if !_dee {return ErrTypeCheck ;};_cacd ,_dee :=_fed .(*PSProgram );if !_dee {return ErrTypeCheck ;};_cdge ,_dee :=_bbbc .(*PSBoolean );if !_dee {return ErrTypeCheck ;};if _cdge .Val {_bcf :=_cacd .Exec (_gdfd );return _bcf ;};_fee =_bcb .Exec (_gdfd );return _fee ;};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_cg :=&PSExecutor {};_cg .Stack =NewPSStack ();_cg ._fg =program ;return _cg ;};func (_bbaf *PSOperand )mod (_ebb *PSStack )error {_befb ,_feef :=_ebb .Pop ();if _feef !=nil {return _feef ;};_dbc ,_feef :=_ebb .Pop ();if _feef !=nil {return _feef ;};_abge ,_ccg :=_befb .(*PSInteger );if !_ccg {return ErrTypeCheck ;};if _abge .Val ==0{return ErrUndefinedResult ;};_adg ,_ccg :=_dbc .(*PSInteger );if !_ccg {return ErrTypeCheck ;};_fagaf :=_adg .Val %_abge .Val ;_feef =_ebb .Push (MakeInteger (_fagaf ));return _feef ;};func (_dbd *PSProgram )DebugString ()string {_dd :="\u007b\u0020";for _ ,_gaa :=range *_dbd {_dd +=_gaa .DebugString ();_dd +="\u0020";};_dd +="\u007d";return _dd ;};func (_fcb *PSOperand )String ()string {return string (*_fcb )};func (_gba *PSOperand )truncate (_afb *PSStack )error {_dbg ,_acbb :=_afb .Pop ();if _acbb !=nil {return _acbb ;};if _agg ,_cega :=_dbg .(*PSReal );_cega {_bge :=int (_agg .Val );_acbb =_afb .Push (MakeReal (float64 (_bge )));}else if _agga ,_cfcb :=_dbg .(*PSInteger );_cfcb {_acbb =_afb .Push (MakeInteger (_agga .Val ));}else {return ErrTypeCheck ;};return _acbb ;};var ErrRangeCheck =_c .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");func (_fede *PSParser )parseFunction ()(*PSProgram ,error ){_gedb ,_ :=_fede ._acab .ReadByte ();if _gedb !='{'{return nil ,_c .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_gecc :=NewPSProgram ();for {_fede .skipSpaces ();_gcae ,_adab :=_fede ._acab .Peek (2);if _adab !=nil {if _adab ==_a .EOF {break ;};return nil ,_adab ;};_fc .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_gcae ));if _gcae [0]=='}'{_fc .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_fede ._acab .ReadByte ();break ;}else if _gcae [0]=='{'{_fc .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_fffe ,_eaec :=_fede .parseFunction ();if _eaec !=nil {return nil ,_eaec ;};_gecc .Append (_fffe );}else if _bg .IsDecimalDigit (_gcae [0])||(_gcae [0]=='-'&&_bg .IsDecimalDigit (_gcae [1])){_fc .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_bade ,_aabf :=_fede .parseNumber ();if _aabf !=nil {return nil ,_aabf ;};_gecc .Append (_bade );}else {_fc .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_gcae ,_ =_fede ._acab .Peek (5);_dabg :=string (_gcae );_fc .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_dabg );if (len (_dabg )> 4)&&(_dabg [:5]=="\u0066\u0061\u006cs\u0065"){_cfbe ,_acbf :=_fede .parseBool ();if _acbf !=nil {return nil ,_acbf ;};_gecc .Append (_cfbe );}else if (len (_dabg )> 3)&&(_dabg [:4]=="\u0074\u0072\u0075\u0065"){_fbf ,_gbbf :=_fede .parseBool ();if _gbbf !=nil {return nil ,_gbbf ;};_gecc .Append (_fbf );}else {_efeg ,_gage :=_fede .parseOperand ();if _gage !=nil {return nil ,_gage ;};_gecc .Append (_efeg );};};};return _gecc ,nil ;};func (_ggfg *PSOperand )pop (_gebb *PSStack )error {_ ,_dcgb :=_gebb .Pop ();if _dcgb !=nil {return _dcgb ;};return nil ;};func (_beea *PSOperand )roll (_adc *PSStack )error {_gag ,_dgcb :=_adc .Pop ();if _dgcb !=nil {return _dgcb ;};_ffe ,_dgcb :=_adc .Pop ();if _dgcb !=nil {return _dgcb ;};_aege ,_gaad :=_gag .(*PSInteger );if !_gaad {return ErrTypeCheck ;};_gfae ,_gaad :=_ffe .(*PSInteger );if !_gaad {return ErrTypeCheck ;};if _gfae .Val < 0{return ErrRangeCheck ;};if _gfae .Val ==0||_gfae .Val ==1{return nil ;};if _gfae .Val > len (*_adc ){return ErrStackUnderflow ;};for _dag :=0;_dag < _abee (_aege .Val );_dag ++{var _eefc []PSObject ;_eefc =(*_adc )[len (*_adc )-(_gfae .Val ):len (*_adc )];if _aege .Val > 0{_bbcg :=_eefc [len (_eefc )-1];_eefc =append ([]PSObject {_bbcg },_eefc [0:len (_eefc )-1]...);}else {_afgbf :=_eefc [len (_eefc )-_gfae .Val ];_eefc =append (_eefc [1:],_afgbf );};_fde :=append ((*_adc )[0:len (*_adc )-_gfae .Val ],_eefc ...);_adc =&_fde ;};return nil ;};

// Append appends an object to the PSProgram.
func (_gg *PSProgram )Append (obj PSObject ){*_gg =append (*_gg ,obj )};func (_gddg *PSOperand )div (_fcbc *PSStack )error {_fe ,_cdd :=_fcbc .Pop ();if _cdd !=nil {return _cdd ;};_faf ,_cdd :=_fcbc .Pop ();if _cdd !=nil {return _cdd ;};_bbdb ,_acb :=_fe .(*PSReal );_dgf ,_fdg :=_fe .(*PSInteger );if !_acb &&!_fdg {return ErrTypeCheck ;};if _acb &&_bbdb .Val ==0{return ErrUndefinedResult ;};if _fdg &&_dgf .Val ==0{return ErrUndefinedResult ;};_gde ,_ceg :=_faf .(*PSReal );_fcdd ,_cae :=_faf .(*PSInteger );if !_ceg &&!_cae {return ErrTypeCheck ;};var _afc float64 ;if _ceg {_afc =_gde .Val ;}else {_afc =float64 (_fcdd .Val );};if _acb {_afc /=_bbdb .Val ;}else {_afc /=float64 (_dgf .Val );};_cdd =_fcbc .Push (MakeReal (_afc ));return _cdd ;};func (_efe *PSOperand )and (_edab *PSStack )error {_gc ,_gcg :=_edab .Pop ();if _gcg !=nil {return _gcg ;};_gad ,_gcg :=_edab .Pop ();if _gcg !=nil {return _gcg ;};if _fae ,_eg :=_gc .(*PSBoolean );_eg {_gb ,_cdb :=_gad .(*PSBoolean );if !_cdb {return ErrTypeCheck ;};_gcg =_edab .Push (MakeBool (_fae .Val &&_gb .Val ));return _gcg ;};if _edaf ,_cec :=_gc .(*PSInteger );_cec {_gdd ,_dgdb :=_gad .(*PSInteger );if !_dgdb {return ErrTypeCheck ;};_gcg =_edab .Push (MakeInteger (_edaf .Val &_gdd .Val ));return _gcg ;};return ErrTypeCheck ;};func (_bca *PSOperand )ceiling (_abb *PSStack )error {_fagc ,_fga :=_abb .Pop ();if _fga !=nil {return _fga ;};if _gcf ,_fca :=_fagc .(*PSReal );_fca {_fga =_abb .Push (MakeReal (_ab .Ceil (_gcf .Val )));}else if _ea ,_ggf :=_fagc .(*PSInteger );_ggf {_fga =_abb .Push (MakeInteger (_ea .Val ));}else {_fga =ErrTypeCheck ;};return _fga ;};func (_cgc *PSOperand )sub (_eacd *PSStack )error {_fbc ,_gefg :=_eacd .Pop ();if _gefg !=nil {return _gefg ;};_baa ,_gefg :=_eacd .Pop ();if _gefg !=nil {return _gefg ;};_dbb ,_dcgg :=_fbc .(*PSReal );_eefe ,_cbde :=_fbc .(*PSInteger );if !_dcgg &&!_cbde {return ErrTypeCheck ;};_cfdc ,_baab :=_baa .(*PSReal );_baec ,_dadb :=_baa .(*PSInteger );if !_baab &&!_dadb {return ErrTypeCheck ;};if _cbde &&_dadb {_cdce :=_baec .Val -_eefe .Val ;_egd :=_eacd .Push (MakeInteger (_cdce ));return _egd ;};var _eaeg float64 =0;if _baab {_eaeg =_cfdc .Val ;}else {_eaeg =float64 (_baec .Val );};if _dcgg {_eaeg -=_dbb .Val ;}else {_eaeg -=float64 (_eefe .Val );};_gefg =_eacd .Push (MakeReal (_eaeg ));return _gefg ;};func (_gabg *PSOperand )DebugString ()string {return _g .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_gabg );};const _bb =0.000001;func (_ge *PSReal )String ()string {return _g .Sprintf ("\u0025\u002e\u0035\u0066",_ge .Val )};func (_gdef *PSOperand )neg (_feee *PSStack )error {_dadc ,_efg :=_feee .Pop ();if _efg !=nil {return _efg ;};if _bga ,_dacc :=_dadc .(*PSReal );_dacc {_efg =_feee .Push (MakeReal (-_bga .Val ));return _efg ;}else if _efd ,_gbe :=_dadc .(*PSInteger );_gbe {_efg =_feee .Push (MakeInteger (-_efd .Val ));return _efg ;}else {return ErrTypeCheck ;};};func _abee (_fefg int )int {if _fefg < 0{return -_fefg ;};return _fefg ;};func (_ccf *PSParser )parseBool ()(*PSBoolean ,error ){_gfg ,_ccbeb :=_ccf ._acab .Peek (4);if _ccbeb !=nil {return MakeBool (false ),_ccbeb ;};if (len (_gfg )>=4)&&(string (_gfg [:4])=="\u0074\u0072\u0075\u0065"){_ccf ._acab .Discard (4);return MakeBool (true ),nil ;};_gfg ,_ccbeb =_ccf ._acab .Peek (5);if _ccbeb !=nil {return MakeBool (false ),_ccbeb ;};if (len (_gfg )>=5)&&(string (_gfg [:5])=="\u0066\u0061\u006cs\u0065"){_ccf ._acab .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_c .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_egab *PSStack )DebugString ()string {_ecde :="\u005b\u0020";for _ ,_afe :=range *_egab {_ecde +=_afe .DebugString ();_ecde +="\u0020";};_ecde +="\u005d";return _ecde ;};func (_ad *PSOperand )Duplicate ()PSObject {_ae :=*_ad ;return &_ae };func (_bad *PSOperand )mul (_dce *PSStack )error {_baef ,_beb :=_dce .Pop ();if _beb !=nil {return _beb ;};_ebe ,_beb :=_dce .Pop ();if _beb !=nil {return _beb ;};_cgdg ,_ebbc :=_baef .(*PSReal );_afdg ,_feec :=_baef .(*PSInteger );if !_ebbc &&!_feec {return ErrTypeCheck ;};_ecb ,_fab :=_ebe .(*PSReal );_bac ,_fba :=_ebe .(*PSInteger );if !_fab &&!_fba {return ErrTypeCheck ;};if _feec &&_fba {_faaf :=_afdg .Val *_bac .Val ;_agd :=_dce .Push (MakeInteger (_faaf ));return _agd ;};var _gedc float64 ;if _ebbc {_gedc =_cgdg .Val ;}else {_gedc =float64 (_afdg .Val );};if _fab {_gedc *=_ecb .Val ;}else {_gedc *=float64 (_bac .Val );};_beb =_dce .Push (MakeReal (_gedc ));return _beb ;};var ErrStackOverflow =_c .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");

// Empty empties the stack.
func (_cee *PSStack )Empty (){*_cee =[]PSObject {}};func (_ced *PSOperand )bitshift (_dece *PSStack )error {_efeb ,_ddb :=_dece .PopInteger ();if _ddb !=nil {return _ddb ;};_cdc ,_ddb :=_dece .PopInteger ();if _ddb !=nil {return _ddb ;};var _gff int ;if _efeb >=0{_gff =_cdc <<uint (_efeb );}else {_gff =_cdc >>uint (-_efeb );};_ddb =_dece .Push (MakeInteger (_gff ));return _ddb ;};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_dbcb :=PSBoolean {};_dbcb .Val =val ;return &_dbcb };func (_ebed *PSOperand )xor (_aegge *PSStack )error {_ccbe ,_dcff :=_aegge .Pop ();if _dcff !=nil {return _dcff ;};_fgagc ,_dcff :=_aegge .Pop ();if _dcff !=nil {return _dcff ;};if _cfca ,_fdfg :=_ccbe .(*PSBoolean );_fdfg {_facd ,_eefd :=_fgagc .(*PSBoolean );if !_eefd {return ErrTypeCheck ;};_dcff =_aegge .Push (MakeBool (_cfca .Val !=_facd .Val ));return _dcff ;};if _fcee ,_ccgg :=_ccbe .(*PSInteger );_ccgg {_deed ,_bcbc :=_fgagc .(*PSInteger );if !_bcbc {return ErrTypeCheck ;};_dcff =_aegge .Push (MakeInteger (_fcee .Val ^_deed .Val ));return _dcff ;};return ErrTypeCheck ;};func (_ffcg *PSOperand )exch (_gca *PSStack )error {_cac ,_gfd :=_gca .Pop ();if _gfd !=nil {return _gfd ;};_gdg ,_gfd :=_gca .Pop ();if _gfd !=nil {return _gfd ;};_gfd =_gca .Push (_cac );if _gfd !=nil {return _gfd ;};_gfd =_gca .Push (_gdg );return _gfd ;};func (_aag *PSOperand )copy (_cde *PSStack )error {_bbb ,_ffd :=_cde .PopInteger ();if _ffd !=nil {return _ffd ;};if _bbb < 0{return ErrRangeCheck ;};if _bbb > len (*_cde ){return ErrRangeCheck ;};*_cde =append (*_cde ,(*_cde )[len (*_cde )-_bbb :]...);return nil ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_afg *PSInteger )String ()string {return _g .Sprintf ("\u0025\u0064",_afg .Val )};func (_ege *PSOperand )exp (_fgfc *PSStack )error {_ccb ,_eebf :=_fgfc .PopNumberAsFloat64 ();if _eebf !=nil {return _eebf ;};_ffa ,_eebf :=_fgfc .PopNumberAsFloat64 ();if _eebf !=nil {return _eebf ;};if _ab .Abs (_ccb )< 1&&_ffa < 0{return ErrUndefinedResult ;};_gbc :=_ab .Pow (_ffa ,_ccb );_eebf =_fgfc .Push (MakeReal (_gbc ));return _eebf ;};func (_bbf *PSReal )Duplicate ()PSObject {_db :=PSReal {};_db .Val =_bbf .Val ;return &_db };var ErrUnsupportedOperand =_c .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");func (_dab *PSOperand )ne (_ggbe *PSStack )error {_deb :=_dab .eq (_ggbe );if _deb !=nil {return _deb ;};_deb =_dab .not (_ggbe );return _deb ;};func (_aeg *PSOperand )index (_cea *PSStack )error {_eaccb ,_ecd :=_cea .Pop ();if _ecd !=nil {return _ecd ;};_gfbe ,_fac :=_eaccb .(*PSInteger );if !_fac {return ErrTypeCheck ;};if _gfbe .Val < 0{return ErrRangeCheck ;};if _gfbe .Val > len (*_cea )-1{return ErrStackUnderflow ;};_bdgg :=(*_cea )[len (*_cea )-1-_gfbe .Val ];_ecd =_cea .Push (_bdgg .Duplicate ());return _ecd ;};func (_effc *PSOperand )cvr (_gdf *PSStack )error {_cfe ,_aaf :=_gdf .Pop ();if _aaf !=nil {return _aaf ;};if _fda ,_dad :=_cfe .(*PSReal );_dad {_aaf =_gdf .Push (MakeReal (_fda .Val ));}else if _dfe ,_cebe :=_cfe .(*PSInteger );_cebe {_aaf =_gdf .Push (MakeReal (float64 (_dfe .Val )));}else {return ErrTypeCheck ;};return _aaf ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_gbg *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_edfc ,_defbe :=_gbg .Pop ();if _defbe !=nil {return 0,_defbe ;};if _cge ,_aeb :=_edfc .(*PSReal );_aeb {return _cge .Val ,nil ;}else if _fec ,_abc :=_edfc .(*PSInteger );_abc {return float64 (_fec .Val ),nil ;}else {return 0,ErrTypeCheck ;};};func (_aac *PSOperand )atan (_dc *PSStack )error {_gbb ,_egf :=_dc .PopNumberAsFloat64 ();if _egf !=nil {return _egf ;};_fcd ,_egf :=_dc .PopNumberAsFloat64 ();if _egf !=nil {return _egf ;};if _gbb ==0{var _aga error ;if _fcd < 0{_aga =_dc .Push (MakeReal (270));}else {_aga =_dc .Push (MakeReal (90));};return _aga ;};_bf :=_fcd /_gbb ;_bag :=_ab .Atan (_bf )*180/_ab .Pi ;_egf =_dc .Push (MakeReal (_bag ));return _egf ;};func (_eeec *PSOperand )dup (_cfb *PSStack )error {_dcf ,_bgd :=_cfb .Pop ();if _bgd !=nil {return _bgd ;};_bgd =_cfb .Push (_dcf );if _bgd !=nil {return _bgd ;};_bgd =_cfb .Push (_dcf .Duplicate ());return _bgd ;};func (_cab *PSOperand )cos (_fbe *PSStack )error {_aff ,_cf :=_fbe .PopNumberAsFloat64 ();if _cf !=nil {return _cf ;};_gaag :=_ab .Cos (_aff *_ab .Pi /180.0);_cf =_fbe .Push (MakeReal (_gaag ));return _cf ;};func (_ed *PSBoolean )Duplicate ()PSObject {_ga :=PSBoolean {};_ga .Val =_ed .Val ;return &_ga };var ErrUndefinedResult =_c .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");

// PSInteger represents an integer.
type PSInteger struct{Val int ;};func (_fb *PSOperand )add (_daa *PSStack )error {_ggc ,_ged :=_daa .Pop ();if _ged !=nil {return _ged ;};_eee ,_ged :=_daa .Pop ();if _ged !=nil {return _ged ;};_bbd ,_ddc :=_ggc .(*PSReal );_efb ,_ggdb :=_ggc .(*PSInteger );if !_ddc &&!_ggdb {return ErrTypeCheck ;};_dgd ,_gfe :=_eee .(*PSReal );_dga ,_gge :=_eee .(*PSInteger );if !_gfe &&!_gge {return ErrTypeCheck ;};if _ggdb &&_gge {_ddd :=_efb .Val +_dga .Val ;_ca :=_daa .Push (MakeInteger (_ddd ));return _ca ;};var _ag float64 ;if _ddc {_ag =_bbd .Val ;}else {_ag =float64 (_efb .Val );};if _gfe {_ag +=_dgd .Val ;}else {_ag +=float64 (_dga .Val );};_ged =_daa .Push (MakeReal (_ag ));return _ged ;};func (_dca *PSOperand )gt (_cdeb *PSStack )error {_ada ,_fbb :=_cdeb .PopNumberAsFloat64 ();if _fbb !=nil {return _fbb ;};_dfc ,_fbb :=_cdeb .PopNumberAsFloat64 ();if _fbb !=nil {return _fbb ;};if _ab .Abs (_dfc -_ada )< _bb {_cbdd :=_cdeb .Push (MakeBool (false ));return _cbdd ;}else if _dfc > _ada {_faga :=_cdeb .Push (MakeBool (true ));return _faga ;}else {_bfc :=_cdeb .Push (MakeBool (false ));return _bfc ;};};func (_fgdd *PSOperand )lt (_bfd *PSStack )error {_abg ,_gdb :=_bfd .PopNumberAsFloat64 ();if _gdb !=nil {return _gdb ;};_ead ,_gdb :=_bfd .PopNumberAsFloat64 ();if _gdb !=nil {return _gdb ;};if _ab .Abs (_ead -_abg )< _bb {_acf :=_bfd .Push (MakeBool (false ));return _acf ;}else if _ead < _abg {_dgc :=_bfd .Push (MakeBool (true ));return _dgc ;}else {_cca :=_bfd .Push (MakeBool (false ));return _cca ;};};

// Exec executes the program, typically leaving output values on the stack.
func (_fagb *PSProgram )Exec (stack *PSStack )error {for _ ,_ccda :=range *_fagb {var _ggd error ;switch _eeb :=_ccda .(type ){case *PSInteger :_gf :=_eeb ;_ggd =stack .Push (_gf );case *PSReal :_cd :=_eeb ;_ggd =stack .Push (_cd );case *PSBoolean :_ff :=_eeb ;_ggd =stack .Push (_ff );case *PSProgram :_cbg :=_eeb ;_ggd =stack .Push (_cbg );case *PSOperand :_gab :=_eeb ;_ggd =_gab .Exec (stack );default:return ErrTypeCheck ;};if _ggd !=nil {return _ggd ;};};return nil ;};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};func (_fag *PSBoolean )DebugString ()string {return _g .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_fag .Val );};func (_adgc *PSParser )skipSpaces ()(int ,error ){_dfbc :=0;for {_eca ,_fbcf :=_adgc ._acab .Peek (1);if _fbcf !=nil {return 0,_fbcf ;};if _bg .IsWhiteSpace (_eca [0]){_adgc ._acab .ReadByte ();_dfbc ++;}else {break ;};};return _dfbc ,nil ;};

// Push pushes an object on top of the stack.
func (_ffaa *PSStack )Push (obj PSObject )error {if len (*_ffaa )> 100{return ErrStackOverflow ;};*_ffaa =append (*_ffaa ,obj );return nil ;};

// String returns a string representation of the stack.
func (_cgg *PSStack )String ()string {_dge :="\u005b\u0020";for _ ,_ggab :=range *_cgg {_dge +=_ggab .String ();_dge +="\u0020";};_dge +="\u005d";return _dge ;};func (_cfc *PSOperand )round (_gac *PSStack )error {_dfb ,_eec :=_gac .Pop ();if _eec !=nil {return _eec ;};if _dcc ,_fef :=_dfb .(*PSReal );_fef {_eec =_gac .Push (MakeReal (_ab .Floor (_dcc .Val +0.5)));}else if _afgb ,_dgdf :=_dfb .(*PSInteger );_dgdf {_eec =_gac .Push (MakeInteger (_afgb .Val ));}else {return ErrTypeCheck ;};return _eec ;};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};func (_befa *PSOperand )ge (_egc *PSStack )error {_faa ,_dae :=_egc .PopNumberAsFloat64 ();if _dae !=nil {return _dae ;};_bcg ,_dae :=_egc .PopNumberAsFloat64 ();if _dae !=nil {return _dae ;};if _ab .Abs (_bcg -_faa )< _bb {_ade :=_egc .Push (MakeBool (true ));return _ade ;}else if _bcg > _faa {_gga :=_egc .Push (MakeBool (true ));return _gga ;}else {_cbe :=_egc .Push (MakeBool (false ));return _cbe ;};};func (_cdcd *PSParser )parseNumber ()(PSObject ,error ){_abe ,_gcc :=_bg .ParseNumber (_cdcd ._acab );if _gcc !=nil {return nil ,_gcc ;};switch _adf :=_abe .(type ){case *_bg .PdfObjectFloat :return MakeReal (float64 (*_adf )),nil ;case *_bg .PdfObjectInteger :return MakeInteger (int (*_adf )),nil ;};return nil ,_g .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_abe );};func (_bfg *PSOperand )not (_cff *PSStack )error {_aab ,_fgaa :=_cff .Pop ();if _fgaa !=nil {return _fgaa ;};if _bed ,_defb :=_aab .(*PSBoolean );_defb {_fgaa =_cff .Push (MakeBool (!_bed .Val ));return _fgaa ;}else if _fff ,_fbg :=_aab .(*PSInteger );_fbg {_fgaa =_cff .Push (MakeInteger (^_fff .Val ));return _fgaa ;}else {return ErrTypeCheck ;};};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_ede :=PSReal {};_ede .Val =val ;return &_ede };func (_dgdg *PSOperand )or (_eaf *PSStack )error {_gbbdb ,_eada :=_eaf .Pop ();if _eada !=nil {return _eada ;};_fceg ,_eada :=_eaf .Pop ();if _eada !=nil {return _eada ;};if _fddb ,_efef :=_gbbdb .(*PSBoolean );_efef {_efc ,_fgag :=_fceg .(*PSBoolean );if !_fgag {return ErrTypeCheck ;};_eada =_eaf .Push (MakeBool (_fddb .Val ||_efc .Val ));return _eada ;};if _bda ,_eae :=_gbbdb .(*PSInteger );_eae {_bgc ,_aca :=_fceg .(*PSInteger );if !_aca {return ErrTypeCheck ;};_eada =_eaf .Push (MakeInteger (_bda .Val |_bgc .Val ));return _eada ;};return ErrTypeCheck ;};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_fg *PSProgram ;};func (_dg *PSProgram )Duplicate ()PSObject {_bbfa :=&PSProgram {};for _ ,_ccd :=range *_dg {_bbfa .Append (_ccd .Duplicate ());};return _bbfa ;};func (_eacc *PSOperand )ifCondition (_cegc *PSStack )error {_cfd ,_dcg :=_cegc .Pop ();if _dcg !=nil {return _dcg ;};_caeg ,_dcg :=_cegc .Pop ();if _dcg !=nil {return _dcg ;};_fcc ,_fbd :=_cfd .(*PSProgram );if !_fbd {return ErrTypeCheck ;};_ggb ,_fbd :=_caeg .(*PSBoolean );if !_fbd {return ErrTypeCheck ;};if _ggb .Val {_gce :=_fcc .Exec (_cegc );return _gce ;};return nil ;};func (_gdgc *PSOperand )le (_acbe *PSStack )error {_bee ,_fad :=_acbe .PopNumberAsFloat64 ();if _fad !=nil {return _fad ;};_gee ,_fad :=_acbe .PopNumberAsFloat64 ();if _fad !=nil {return _fad ;};if _ab .Abs (_gee -_bee )< _bb {_dgdc :=_acbe .Push (MakeBool (true ));return _dgdc ;}else if _gee < _bee {_gbbd :=_acbe .Push (MakeBool (true ));return _gbbd ;}else {_aegg :=_acbe .Push (MakeBool (false ));return _aegg ;};};func (_fbda *PSOperand )sqrt (_gefba *PSStack )error {_daf ,_bcgc :=_gefba .PopNumberAsFloat64 ();if _bcgc !=nil {return _bcgc ;};if _daf < 0{return ErrRangeCheck ;};_gda :=_ab .Sqrt (_daf );_bcgc =_gefba .Push (MakeReal (_gda ));return _bcgc ;};func (_cgd *PSOperand )cvi (_bdc *PSStack )error {_bdg ,_bdb :=_bdc .Pop ();if _bdb !=nil {return _bdb ;};if _cbb ,_eed :=_bdg .(*PSReal );_eed {_afd :=int (_cbb .Val );_bdb =_bdc .Push (MakeInteger (_afd ));}else if _ffc ,_fgd :=_bdg .(*PSInteger );_fgd {_dda :=_ffc .Val ;_bdb =_bdc .Push (MakeInteger (_dda ));}else {return ErrTypeCheck ;};return _bdb ;};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_bc *PSProgram )String ()string {_def :="\u007b\u0020";for _ ,_fce :=range *_bc {_def +=_fce .String ();_def +="\u0020";};_def +="\u007d";return _def ;};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_bfed :=PSOperand (val );return &_bfed };func (_gabd *PSOperand )idiv (_cdg *PSStack )error {_fdf ,_cabc :=_cdg .Pop ();if _cabc !=nil {return _cabc ;};_eefb ,_cabc :=_cdg .Pop ();if _cabc !=nil {return _cabc ;};_bae ,_bbc :=_fdf .(*PSInteger );if !_bbc {return ErrTypeCheck ;};if _bae .Val ==0{return ErrUndefinedResult ;};_gabdf ,_bbc :=_eefb .(*PSInteger );if !_bbc {return ErrTypeCheck ;};_gef :=_gabdf .Val /_bae .Val ;_cabc =_cdg .Push (MakeInteger (_gef ));return _cabc ;};func (_bef *PSBoolean )String ()string {return _g .Sprintf ("\u0025\u0076",_bef .Val )};

// Parse parses the postscript and store as a program that can be executed.
func (_bfe *PSParser )Parse ()(*PSProgram ,error ){_bfe .skipSpaces ();_ecda ,_gagf :=_bfe ._acab .Peek (2);if _gagf !=nil {return nil ,_gagf ;};if _ecda [0]!='{'{return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");};_ccde ,_gagf :=_bfe .parseFunction ();if _gagf !=nil &&_gagf !=_a .EOF {return nil ,_gagf ;};return _ccde ,_gagf ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_fgc :=PSParser {};_edad :=_b .NewBuffer (content );_fgc ._acab =_e .NewReader (_edad );return &_fgc ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_cga *PSOperand )Exec (stack *PSStack )error {_geb :=ErrUnsupportedOperand ;switch *_cga {case "\u0061\u0062\u0073":_geb =_cga .abs (stack );case "\u0061\u0064\u0064":_geb =_cga .add (stack );case "\u0061\u006e\u0064":_geb =_cga .and (stack );case "\u0061\u0074\u0061\u006e":_geb =_cga .atan (stack );case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_geb =_cga .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_geb =_cga .ceiling (stack );case "\u0063\u006f\u0070\u0079":_geb =_cga .copy (stack );case "\u0063\u006f\u0073":_geb =_cga .cos (stack );case "\u0063\u0076\u0069":_geb =_cga .cvi (stack );case "\u0063\u0076\u0072":_geb =_cga .cvr (stack );case "\u0064\u0069\u0076":_geb =_cga .div (stack );case "\u0064\u0075\u0070":_geb =_cga .dup (stack );case "\u0065\u0071":_geb =_cga .eq (stack );case "\u0065\u0078\u0063\u0068":_geb =_cga .exch (stack );case "\u0065\u0078\u0070":_geb =_cga .exp (stack );case "\u0066\u006c\u006fo\u0072":_geb =_cga .floor (stack );case "\u0067\u0065":_geb =_cga .ge (stack );case "\u0067\u0074":_geb =_cga .gt (stack );case "\u0069\u0064\u0069\u0076":_geb =_cga .idiv (stack );case "\u0069\u0066":_geb =_cga .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_geb =_cga .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_geb =_cga .index (stack );case "\u006c\u0065":_geb =_cga .le (stack );case "\u006c\u006f\u0067":_geb =_cga .log (stack );case "\u006c\u006e":_geb =_cga .ln (stack );case "\u006c\u0074":_geb =_cga .lt (stack );case "\u006d\u006f\u0064":_geb =_cga .mod (stack );case "\u006d\u0075\u006c":_geb =_cga .mul (stack );case "\u006e\u0065":_geb =_cga .ne (stack );case "\u006e\u0065\u0067":_geb =_cga .neg (stack );case "\u006e\u006f\u0074":_geb =_cga .not (stack );case "\u006f\u0072":_geb =_cga .or (stack );case "\u0070\u006f\u0070":_geb =_cga .pop (stack );case "\u0072\u006f\u0075n\u0064":_geb =_cga .round (stack );case "\u0072\u006f\u006c\u006c":_geb =_cga .roll (stack );case "\u0073\u0069\u006e":_geb =_cga .sin (stack );case "\u0073\u0071\u0072\u0074":_geb =_cga .sqrt (stack );case "\u0073\u0075\u0062":_geb =_cga .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_geb =_cga .truncate (stack );case "\u0078\u006f\u0072":_geb =_cga .xor (stack );};return _geb ;};